import "user.base";
import "user.web";
g_disable_result();
var ctx = g_web_get_api();
if (g_is_null(ctx)) { return; }
var route = g_string_split(ctx["route"], "/");

g_printn("API Request: " + ctx["route"]);

// QUERY
if (route[0] == "query") {
if (route[1] == "info") {
    ctx["resp"] := [
        [ "主机名", g_info_get_hostname() ],
        [ "IP地址", g_info_get_ip() ],
        [ "Java 运行时环境版本", g_env_get("java.version") ],
        [ "Java 运行时环境供应商", g_env_get("java.vendor") ],
        [ "Java 供应商的 URL", g_env_get("java.vendor.url") ],
        [ "Java 安装目录", g_env_get("java.home") ],
        [ "Java 虚拟机规范版本", g_env_get("java.vm.specification.version") ],
        [ "Java 虚拟机规范供应商", g_env_get("java.vm.specification.vendor") ],
        [ "Java 虚拟机规范名称", g_env_get("java.vm.specification.name") ],
        [ "Java 虚拟机实现版本", g_env_get("java.vm.version") ],
        [ "Java 虚拟机实现供应商", g_env_get("java.vm.vendor") ],
        [ "Java 虚拟机实现名称", g_env_get("java.vm.name") ],
        [ "Java 运行时环境规范版本", g_env_get("java.specification.version") ],
        [ "Java 运行时环境规范供应商", g_env_get("java.specification.vendor") ],
        [ "Java 运行时环境规范名称", g_env_get("java.specification.name") ],
        [ "Java 类格式版本号", g_env_get("java.class.version") ],
        //[ "Java 类路径", g_env_get("java.class.path") ],
        //[ "加载库时搜索的路径列表", g_env_get("java.library.path") ],
        //[ "默认的临时文件路径", g_env_get("java.io.tmpdir") ],
        //[ "要使用的 JIT 编译器的名称", g_env_get("java.compiler") ],
        //[ "一个或多个扩展目录的路径", g_env_get("java.ext.dirs") ],
        [ "操作系统的名称", g_env_get("os.name") ],
        [ "操作系统的架构", g_env_get("os.arch") ],
        [ "操作系统的版本", g_env_get("os.version") ],
        //[ "文件分隔符(在 UNIX 系统中是\"/\")", g_env_get("file.separator") ],
        //[ "路径分隔符(在 UNIX 系统中是\":\")", g_env_get("path.separator") ],
        //[ "行分隔符(在 UNIX 系统中是\"/n\")", g_env_get("line.separator") ],
        [ "用户的账户名称", g_env_get("user.name") ],
        [ "用户的主目录", g_env_get("user.home") ],
        [ "用户的当前工作目录", g_env_get("user.dir") ]
    ];
} else if (route[1] == "env") {
    ctx["resp"] := [
        [ "唯一标识", g_env_get_guid() ],
        [ "作者", g_author() ],
        [ "当前版本", g_version() ],
        [ "仓库地址", g_github_repo() ]
    ];
} else if (route[1] == "resource") {
    ctx["resp"] := [
        [ "速度", g_res_get_speed() ],
        [ "进程数", g_res_get_proc_size() ],
        [ "管道数", g_res_get_pipe_size() ],
        [ "共享数", g_res_get_share_size() ],
        [ "文件数", g_res_get_file_size() ],
        [ "虚拟文件数", g_res_get_vfs_size() ]
    ];
} else if (route[1] == "proc") {
    ctx["resp"] := g_res_get_proc();
} else if (route[1] == "pipe") {
    ctx["resp"] := g_res_get_pipe();
} else if (route[1] == "share") {
    ctx["resp"] := g_res_get_share();
} else if (route[1] == "file") {
    ctx["resp"] := g_res_get_file();
} else if (route[1] == "vfs") {
    ctx["resp"] := g_res_get_vfs_list();
} else if (route[1] == "doc") {
    ctx["resp"] := g_info_get_doc();
}
// MARKDOWN
} else if (route[0] == "md") {
    if (route[1] == "readme") {
        ctx["resp"] := g_web_markdown(g_load_resource("/com/bajdcc/code/fs/md/readme.md"));
    } else if (route[1] == "api") {
        var code = g_load_resource("/com/bajdcc/code/fs/api.txt");
        var a = "`" + "`" + "`";
        var md = "
# API 接口

## 介绍

### 方法

- g_web_get_api: 取得请求上下文

- g_web_set_api: 设置请求上下文

- g_load_resource: 获取资源文件内容（UTF-8）

- g_web_markdown: 将Markdown文本转换成HTML格式（采用FlexMark包）

### 结构

- `ctx[\"route\"]`: 请求路径，如`/api/query/info`

- `ctx[\"resp\"]`: 响应内容，将转换成Json

## 代码

" + a + "javascript
" + code + a;
        ctx["resp"] := g_web_markdown(md);
    }
} else if (route[0] == "vfs") { // VFS
    var url = route[1];
    url := g_string_replace(url, "_", "/");
    var file = g_res_get_vfs(url);
    var txt = "";
    if (g_not_null(file)) {
        txt := "# File: " + url + g_endl + "```" + g_endl + file + g_endl + "```";
        ctx["resp"] := g_web_markdown(txt);
    } else {
        txt := "# File not exists";
        ctx["resp"] := g_web_markdown(txt);
    }
}
g_web_set_api(ctx);