import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.remote";
import "sys.task";
import "sys.file";
import "sys.string";

// IRQ: 3
var no = 3;
g_set_process_desc("signal task");
g_set_process_priority(10 + no);

g_printn("Running...");

var destroy_int = func ~() {
    var tt = g_query_share("TASK#TABLE");
    var tn = g_query_share("TASK#NAMELIST");
    // 确保任务和中断依次退出
    // 1. stop task
    g_printn("Stopping service...");
    g_stop_share("TASK#LIST");
    foreach (var i : g_range(0, 15)) { // ! ModuleTask.TASK_NUM - 1
        if (!g_is_null(tt[i])) {
            var tid = tn[i];
            g_task_get_fast(tid, "#SHUTDOWN#");
            var handle = g_create_pipe("TASKSEND#" + i);
            g_write_pipe(handle, 'E');
        }
    }
    g_join_process_array(g_query_share("TASK#PIDS"));
    g_stop_share("TASK#PIDS");
    // 2. stop irq
    g_printn("Stopping irq...");
    foreach (var j : g_range(0, 3)) { // ! INT_NUM
        var _state_ = g_query_share("IRQ#ON." + j);
        g_array_set(_state_, 0, false);
        var handle = g_create_pipe("int#" + j);
        g_destroy_pipe(handle);
        g_sleep(20);
    }
    g_join_process_array(g_query_share("IRQ#PIDS"));
    g_stop_share("IRQ#PIDS");
    g_printn("Good bye.");
};

if (!g_query_file("$/web/api")) {
    g_write_file_s_utf8("$/web/api", g_read_file_utf8_all("!/com/bajdcc/code/fs/api.txt"));
    var examples = g_string_split(g_read_file_utf8_all("!/com/bajdcc/code/fs/examples.txt"), "\\s+");
    foreach (var example : g_range_array(examples)) {
        g_write_file_s_utf8("$/example/" + example,
            g_read_file_utf8_all("!/com/bajdcc/code/fs/example/" + example + ".txt"));
    }
}

var handler = func ~(ch) {
     if (ch == 'E') {
         g_create_process(destroy_int);
         g_printn("*** System halt!");
     } else if (ch == 'A') {
         var pid = g_task_get_fast_arg("proc", "exec_file", "$/web/api");
         if (g_is_null(pid)) {
             g_printn("Failed to create api handler");
             return;
         }
         if (pid["error"]) {
             g_printn("Failed to compile api code");
             return;
         }
     }
};

var state = [true];
g_start_share("IRQ#ON." + no, state);
var handle = g_create_pipe("int#" + no);
for (;;) {
    g_read_pipe(handle, handler);
    g_sleep(10 + no);
    var _state_ = g_query_share("IRQ#ON." + no);
    var on = _state_[0];
    if (!on) { break; }
}

g_printn("Exit.");