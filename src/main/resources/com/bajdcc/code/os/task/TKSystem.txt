import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.string";
import "sys.ui";
import "sys.net";

g_set_process_desc("system service");
g_set_process_priority(72);

g_printn("Running...");

var tid = 1;
var handle = g_create_pipe("TASKSEND#" + tid);

var time = func ~(msg, caller) {
    var id = msg["id"];
    if (g_is_null(id)) {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid task argument - id");
        return;
    }
    if (id == "now") {
        var val = "";
        var arg = msg["arg"];
        var ts = arg[2];
        if (!g_is_null(ts) && ts == "timestamp") {
           val := g_task_get_timestamp();
        } else {
           val := g_task_get_time("yyyy-MM-dd HH:mm:ss");
        }
        g_map_put(msg, "val", val);
    } else if (id == "speed") {
        var val = g_task_sys_speed();
        g_map_put(msg, "val", val);
    } else if (id == "pipe") {
        var val = g_task_get_pipe_stat();
        val := g_string_join_array(val, g_endl);
        g_map_put(msg, "val", val);
    } else if (id == "share") {
        var val = g_task_get_share_stat();
        val := g_string_join_array(val, g_endl);
        g_map_put(msg, "val", val);
    } else if (id == "file") {
        var val = g_task_get_file_stat();
        val := g_string_join_array(val, g_endl);
        g_map_put(msg, "val", val);
    } else if (id == "vfs") {
        var val = g_task_get_vfs_stat();
        val := g_string_join_array(val, g_endl);
        g_map_put(msg, "val", val);
    } else if (id == "user") {
        var val = g_task_get_user_stat();
        val := g_string_join_array(val, g_endl);
        g_map_put(msg, "val", val);
    } else if (id == "guid") {
        var val = g_task_get_guid();
        g_map_put(msg, "val", val);
    } else if (id == "sleep") {
        var arg = msg["arg"];
        var second = arg[2];
        if (g_is_null(second)) { second := g_minus_1; }
        else { second := g_string_atoi(second); }
        if (second < 0) { second := 1; }
        g_task_sleep(second);
        g_map_put(msg, "val", "Slept " + g_to_string(second) + "s.");
    } else if (id == "halt") {
        g_ui_printn("** System is going to power off! **");
        g_net_msg_server_send_error("Server shutdown");
        var shutdown_proc = func ~() {
            g_sleep(100);
            var handle = g_create_pipe("int#3");
            g_start_share("CMD#EXIT", true);
            g_write_pipe(handle, 'E');
        };
        g_create_user_process(shutdown_proc);
        g_map_put(msg, "val", "** System is going to power off! **");
    } else if (id == "load") {
        var arg = msg["arg"];
        var fn = arg[2];
        if (g_is_null(fn)) {
            g_map_put(msg, "error", "1");
            g_map_put(msg, "val", "Invalid path.");
        } else {
            var ret = g_load_user_sync_x("$/usr/bin/" + fn);
            if (ret) {
                g_map_put(msg, "val", "Process exit.");
            } else {
                g_map_put(msg, "error", "1");
                g_ui_printn("Invalid path.");
                g_map_put(msg, "val", "Invalid path.");
            }
        }
    } else {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid argument");
    }
};

var handler = func ~(ch) {
    if (ch == 'E') {
        g_destroy_pipe(handle);
        return;
    }
    var msg = g_query_share("TASKDATA#" + tid);
    var caller = g_query_share("TASKCALLER#" + tid);
    time(msg, caller);
    var handle = g_create_pipe("TASKRECV#" + tid);
    g_write_pipe(handle, 'E');
};

var data = {};
g_task_add_proc(1, data);

g_read_pipe(handle, handler);

g_printn("Exit.");