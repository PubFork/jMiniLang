import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.net";
import "sys.string";
import "sys.ui";

g_set_process_desc("net service");
g_set_process_priority(75);

g_printn("Running...");

var tid = 4;
var handle = g_create_pipe("TASKSEND#" + tid);

g_web_start_spring();

var time = func ~(msg, caller) {
    var id = msg["id"];
    if (g_is_null(id)) {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid task argument - id");
        return;
    }
    if (id == "get") {
        var arg = msg["arg"];
        var str = "";
        var len = g_array_size(arg);
        foreach (var i : g_range(2, len - 1)) {
            str += arg[i];
        }
        var res = g_net_get(str);
        g_map_put(msg, "val", res);
    } else if (id == "get_json") {
        var arg = msg["arg"];
        var str = "";
        var len = g_array_size(arg);
        foreach (var i : g_range(2, len - 1)) {
            str += arg[i];
        }
        var res = g_net_get_json(str);
        g_map_put(msg, "val", res);
    } else if (id == "ssh") {
        var arg = msg["arg"];
        var str = "";
        var len = g_array_size(arg);
        foreach (var i : g_range(2, len - 1)) {
            str += arg[i];
        }
        var res = g_to_string(g_net_ssh(str));
        if (g_string_start_with(res, "Error")) {
            g_map_put(msg, "error", 1);
        }
        g_map_put(msg, "val", res);
    } else if (id == "stop") {
        if (!g_is_null(g_query_share("SSHD#EXIT"))) {
            g_net_msg_server_send_error("Server shutdown");
            g_ui_printn("Server shutdown!");
            g_task_sleep(3);
            g_create_share("SSHD#EXIT", true);
            g_map_put(msg, "val", "Success");
        } else {
            g_map_put(msg, "error", 1);
            g_map_put(msg, "val", "Failed");
        }
    } else if (id == "rss") {
        var arg = msg["arg"];
        var str = "";
        var len = g_array_size(arg);
        foreach (var i : g_range(2, len - 1)) {
            str += arg[i];
        }
        var res = g_net_get_rss(str);
        g_map_put(msg, "val", res);
    } else if (id == "start_web") {
        var arg = msg["arg"];
        var str = "";
        var len = g_array_size(arg);
        foreach (var i : g_range(2, len - 1)) {
            str += arg[i];
        }
        var res = g_net_start_web(str);
        g_map_put(msg, "val", res);
    } else if (id == "stop_web") {
        var res = g_net_stop_web();
        g_map_put(msg, "val", res);
    } else {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid argument");
    }
};

var handler = func ~(ch) {
    if (ch == 'E') {
        var ui_num = 8; // ! UI_NUM
        var ui_name_table = g_query_share("UI#NAMELIST");

        foreach (var i : g_range(0, ui_num - 1)) {
            var ui_name = ui_name_table[i];
            if (!g_is_null(ui_name)) {
                g_create_share("UI#" + ui_name, false);
            }
        }
        g_destroy_pipe(handle);
        return;
    }
    var msg = g_query_share("TASKDATA#" + tid);
    var caller = g_query_share("TASKCALLER#" + tid);
    time(msg, caller);
    var handle = g_create_pipe("TASKRECV#" + tid);
    g_write_pipe(handle, 'E');
};

var data = {};
g_task_add_proc(4, data);

g_read_pipe(handle, handler);

g_web_stop_spring();

g_printn("Exit.");