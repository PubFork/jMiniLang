import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.func";
import "sys.file";
import "sys.string";

g_set_process_desc("proc service");
g_set_process_priority(73);

g_printn("Running...");

var tid = 6;
var handle = g_create_pipe("TASKSEND#" + tid);

var time = func ~(msg, caller) {
    var id = msg["id"];
    if (g_is_null(id)) {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid task argument - id");
        return;
    }
    var arg = msg["arg"];
    var arr = g_func_drop(arg, 2);
    if (g_array_empty(arr)) {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid argument");
        return;
    }
    var key = arr[0];
    if (id == "exec") {
        try {
            var val = g_proc_exec(key);
            g_map_put(msg, "val", { "error": false, "val": val });
        } catch (e) {
            g_map_put(msg, "val", { "error": true, "val": e });
        }
    } else if (id == "kill") {
        var val = g_proc_kill(key);
        g_map_put(msg, "val", val);
    } else if (id == "info") {
        var val = [""];
        var callback = func ~(ch, out) {
            val[0] += ch;
        };
        if (g_read_file_utf8_args("$/proc/" + key, callback, val)) {
            g_map_put(msg, "val", val[0]);
        } else {
            g_map_put(msg, "val", "Invalid PID");
            g_map_put(msg, "error", 1);
        }
    } else {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid argument");
    }
};

var handler = func ~(ch) {
    if (ch == 'E') {
        g_destroy_pipe(handle);
        return;
    }
    var msg = g_query_share("TASKDATA#" + tid);
    var caller = g_query_share("TASKCALLER#" + tid);
    time(msg, caller);
    var handle = g_create_pipe("TASKRECV#" + tid);
    g_write_pipe(handle, 'E');
};

var data = {};
g_task_add_proc(6, data);

g_read_pipe(handle, handler);

g_printn("Exit.");