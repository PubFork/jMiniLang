import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.string";

g_set_process_desc("grep routine");
// USE KMP ALGORITHM.
var pid = g_get_pid();
var share = g_wait_share("PID#" + pid);
g_stop_share("PID#" + pid);
var args = share["args"];
var pat = args[0];
if (g_is_null(pat)) {
    var _in = g_create_pipe("PIPEIN#" + pid);
    var _out = g_create_pipe("PIPEOUT#" + pid);
    g_read_pipe_args(_in, lambda(ch, out) -> g_write_pipe(out, ch), _out);
    g_destroy_pipe(_out);
    return;
}

var patlen = g_string_length(pat);
var m1 = -1;

var next = func ["CALC NEXT"] ~(str) {
    var n = [];
    var u = 0;
    var v = -1;
    g_array_add(n, -1);
    for (var t = 1; t < patlen; t++) {
        g_array_add(n, -1);
    }
    while (u < patlen - 1) {
        if (v == m1 || (str[u] == str[v])) {
            u++;
            v++;
            g_array_set(n, u, v);
        } else {
            v := n[v];
        }
    }
    return n;
};

var find = func ["FIND WITH NEXT"] ~(str, n) {
    var i = 0;
    var j = 0;
    var slen = g_string_length(str);
    while (i < slen && j < patlen) {
        if (j == m1 || (str[i] == pat[j])) {
            i++; j++;
        } else {
            j := n[j];
        }
    }
    if (j == patlen) {
        return i - j;
    }
    return m1;
};

var nextarr = next(pat);

var buf = [];
var pipe = func ["PIPE"] ~(ch, out) {
    if (ch == '\n'/* || ch == '\r'*/) {
        var str = g_string_build(buf);
        var idx = find(str, nextarr);
        if (idx != m1) {
            foreach (var i : g_range_array(buf)) {
                g_write_pipe(out, i);
            }
            g_write_pipe(out, g_endl);
        }
        g_array_clear(buf);
    } else {
        g_array_add(buf, ch);
    }
};

var in = g_create_pipe("PIPEIN#" + pid);
var out = g_create_pipe("PIPEOUT#" + pid);
g_read_pipe_args(in, pipe, out);
g_destroy_pipe(out);