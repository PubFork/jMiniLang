import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.string";
import "sys.class";
import "sys.task";
import "sys.ui";
import "std.base";

g_set_process_desc("news routine");
var pid = g_get_pid();
var share = g_wait_share("PID#" + pid);
g_stop_share("PID#" + pid);
var args = share["args"];

var in = g_create_pipe("PIPEIN#" + pid);
var out = g_create_pipe("PIPEOUT#" + pid);

var signal = "PIDSIG#" + pid;
g_start_share(signal, true);

// -----------------------------------------------------------------------------------------
// State Machine Design and Implementation using Class
// * Reference: https://github.com/bajdcc/NewsApp
// ---- CODE BEGIN ----

var ctx = g_create_context();
g_import_std_base(ctx);

var _ = g_null;

/* -----------------------------------------------------------------
# CLASS [app::news::util.static_timer]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::util.static_timer", lambda(this) { // 定时器
    this."span" := _;
    this."time" := _;
    this."first" := _;
    this."set_span" := lambda(this, span) {
        this."span" := span * 1000;
        this."restart"();
    };
    this."set_span_ms" := lambda(this, span) {
        this."span" := span;
        this."restart"();
    };
    this."is_timeout" := lambda(this) {
        if (!this."first") { return false; }
        var flag = g_task_get_timestamp() >= this."time";
        if (flag) { this."first" := false; }
        return flag;
    };
    this."is_timeout_once" := lambda(this) -> g_task_get_timestamp() >= this."time";
    this."restart" := lambda(this) {
        this."time" := g_task_get_timestamp() + this."span";
        this."first" := true;
    };
    this."reset" := lambda(this) -> this."time" := 0;
}, "object");
/* -----------------------------------------------------------------
# CLASS [app::news::state.interface]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.interface", lambda(this) { // 状态基类
    // 子类使用监听模式以重写方法(AOP)
    // 如果需要返回值，还是用方法覆盖
    this."context" := _;
    this."is_start" := false;
    this."set_context" := lambda(this, context) -> this."context" := context;
    this."on_cancel" := lambda(this, shutdown) -> _;
    this."on_message" := lambda(this, msg) -> _;
    this."on_reset" := lambda(this) -> _;
    this."on_start" := lambda(this) -> _;
    this."on_enter" := lambda(this) -> _;
    this."on_timer" := lambda(this) -> _;
    this."log" := lambda(this, msg) -> _;
}, "object");
/* -----------------------------------------------------------------
# CLASS [app::news::state.base]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.base", lambda(this) { // 状态基类
    g_hook_add_before(this, "on_cancel", lambda(class, name, this, next, shutdown) {
        if (shutdown) {
            this."context"."start_state"("app::news::state.idle");
        } else {
            this."context"."start_state"("app::news::state.end");
        }
        return next();
    });
}, "app::news::state.interface");
/* -----------------------------------------------------------------
# CLASS [app::news::state.begin]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.begin", lambda(this) { // 起始状态
    this."overlay_animation_waiting" := g_create_class(ctx, "app::news::util.static_timer");
    this."overlay_animation_waiting"."set_span"(1);
    g_hook_add_before(this, "on_start", lambda(class, name, this, next) {
        this."is_start" := true;
        this."context"."open_overlay"();
        return next();
    });
    g_hook_add_before(this, "on_timer", lambda(class, name, this, next) {
        if (this."is_start") {
            if (this."overlay_animation_waiting"."is_timeout"()) {
                this."log"("[Overlay] Waiting for animation completed...");
                this."overlay_animation_waiting"."restart"();
                if (this."context"."is_open_overlay") {
                    this."log"("[Overlay] Created window");
                    this."context"."start_state"("app::news::state.queue");
                }
            }
        }
        return next();
    });
}, "app::news::state.base");
/* -----------------------------------------------------------------
# CLASS [app::news::state.end]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.end", lambda(this) { // 结束状态
    this."overlay_animation_waiting" := g_create_class(ctx, "app::news::util.static_timer");
    this."overlay_animation_waiting"."set_span"(1);
    g_hook_add_before(this, "on_start", lambda(class, name, this, next) {
        this."is_start" := true;
        this."log"("[Overlay] Waiting for close...");
        this."context"."close_overlay"();
        return next();
    });
    g_hook_add_before(this, "on_timer", lambda(class, name, this, next) {
        if (this."is_start") {
            if (this."overlay_animation_waiting"."is_timeout"()) {
                this."overlay_animation_waiting"."restart"();
                if (this."context"."has_msg"()) {
                    this."log"("[Overlay] Waiting for animation completed...");
                } else {
                    this."log"("==> Idle <==");
                    this."context"."start_state"("app::news::state.idle");
                }
            }
        }
        return next();
    });
}, "app::news::state.base");
/* -----------------------------------------------------------------
# CLASS [app::news::state.idle]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.idle", lambda(this) { // 空闲状态
    this."idle_timer" := g_create_class(ctx, "app::news::util.static_timer");
    this."idle_timer"."set_span"(5);
    g_hook_add_before(this, "on_start", lambda(class, name, this, next) {
        this."is_start" := true;
        this."idle_timer"."restart"();
        return next();
    });
    g_hook_add_before(this, "on_message", lambda(class, name, this, next, msg) {
        if (this."is_start") {
            return next();
        }
        // else block msg
    });
    g_hook_add_before(this, "on_timer", lambda(class, name, this, next) {
        if (this."is_start") {
            if (this."idle_timer"."is_timeout"()) {
                this."log"("Idle...");
                this."idle_timer"."restart"();
            }
            // check msg coming and enter begin state
            if (this."context"."idle_timer"."is_timeout_once"()) {
                if (this."context"."has_msg"()) {
                    this."context"."idle_timer"."restart"();
                    this."context"."start_state"("app::news::state.begin");
                }
            }
        }
        return next();
    });
}, "app::news::state.base");
/* -----------------------------------------------------------------
# CLASS [app::news::state.waiting]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.waiting", lambda(this) { // 等待状态
    this."time" := _;
    this."retries" := 0;
    this."max_retries" := 5;
    this."idle_timer" := _;
    this."retries_timer" := _;
    g_hook_add_before(this, "on_start", lambda(class, name, this, next) {
        this."is_start" := true;
        this."idle_timer" := g_create_class(ctx, "app::news::util.static_timer");
        this."idle_timer"."set_span_ms"(this."time");
        this."retries_timer" := g_create_class(ctx, "app::news::util.static_timer");
        this."retries_timer"."set_span"(1);
        return next();
    });
    g_hook_add_before(this, "on_message", lambda(class, name, this, next, msg) {
        this."idle_timer"."restart"();
        this."retries" := 0;
        return next();
    });
    g_hook_add_before(this, "on_timer", lambda(class, name, this, next) {
        if (this."idle_timer"."is_timeout_once"()) {
            if (this."context"."has_msg"()) {
                this."log"("[Overlay] Ready for queue...");
                this."context"."start_state"("app::news::state.queue");
            } else if (this."retries_timer"."is_timeout"()) {
                this."retries_timer"."restart"();
                this."retries" := this."retries" + 1;
                if (this."retries" >= this."max_retries") {
                    this."log"("[Overlay] No message available");
                    this."context"."start_state"("app::news::state.end");
                } else {
                    this."log"("[Overlay] Idle...");
                }
            }
        }
        return next();
    });
}, "app::news::state.base");
/* -----------------------------------------------------------------
# CLASS [app::news::state.queue]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.queue", lambda(this) { // 队列
    g_hook_add_before(this, "on_start", lambda(class, name, this, next) {
        this."is_start" := true;
        this."log"("[Overlay] Ready for marquee...");
        return next();
    });
    g_hook_add_before(this, "on_timer", lambda(class, name, this, next) {
        if (this."is_start" && this."context"."has_msg"()) {
            var time = this."context"."marquee"();
            this."log"("[Overlay] Marquee completed, time for waiting: " + time + "ms");
            var state = g_create_class(ctx, "app::news::state.waiting");
            state."set_context"(this."context");
            state."time" := time;
            this."context"."set_state"(state);
        }
        return next();
    });
}, "app::news::state.base");
/* -----------------------------------------------------------------
# CLASS [app::news::state.transfer]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.transfer", lambda(this) { // 传送
    this."idle_timer" := g_create_class(ctx, "app::news::util.static_timer");
    this."idle_timer"."set_span"(6);
    this."msg_queue" := g_create_class(ctx, "list::array");
    g_hook_add_before(this, "on_start", lambda(class, name, this, next) {
        this."is_start" := true;
        this."idle_timer"."restart"();
        this."log"("[Transfer] Started");
        return next();
    });
    g_hook_add_before(this, "on_message", lambda(class, name, this, next, msg) {
        this."msg_queue"."insert"(0, msg);
        return next();
    });
    g_hook_add_before(this, "on_timer", lambda(class, name, this, next) {
        if (this."is_start" && this."idle_timer"."is_timeout_once"()) {
            this."idle_timer"."restart"();
            if (!this."msg_queue"."empty"()) {
                this."log"("[Transfer] Moved one message, rest: " + this."msg_queue"."size"());
                var msg = this."msg_queue"."pop"();
                this."log"("[Transfer] Message: " + msg."str");
                this."context"."add_msg"(msg);
            }
        }
        return next();
    });
}, "app::news::state.base");
/* -----------------------------------------------------------------
# CLASS [app::news::state.crawler]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::state.crawler", lambda(this) { // 抓取
    this."idle_timer" := g_create_class(ctx, "app::news::util.static_timer");
    this."idle_timer"."set_span"(60);
    this."rss_index" := 0;
    this."rss_end" := 0;
    this."rss_list" := g_create_class(ctx, "list::array");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=civilnews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=internews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=mil&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=finannews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=internet&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=housenews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=autonews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=sportnews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=enternews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=gamenews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=edunews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=technnews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=socianews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=shyf&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=shwx&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=zqsk&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=1&class=qwys&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=civilnews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=internews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=mil&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=finannews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=internet&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=housenews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=autonews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=sportnews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=enternews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=gamenews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=edunews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=technnews&tn=rss");
    this."rss_list"."add"("http://news.baidu.com/n?cmd=4&class=socianews&tn=rss");
    this."rss_end" := this."rss_list"."size"();
    this."get_rss" := lambda(this) {
        if (this."rss_index" == this."rss_end") {
            this."rss_index" := 0;
        }
        var idx = this."rss_index";
        this."rss_index" := this."rss_index" + 1;
        return this."rss_list"."get"(idx);
    };
    g_hook_add_before(this, "on_reset", lambda(class, name, this, next) {
        this."idle_timer"."reset"();
        return next();
    });
    g_hook_add_before(this, "on_start", lambda(class, name, this, next) {
        this."is_start" := true;
        this."idle_timer"."reset"();
        this."log"("[Crawler] Started");
        return next();
    });
    g_hook_add_before(this, "on_timer", lambda(class, name, this, next) {
        if (this."is_start" && this."idle_timer"."is_timeout_once"()) {
            this."idle_timer"."restart"();
            if (!this."context"."has_msg"()) {
                var arr = g_create_class(ctx, "list::array");
                this."log"("[Crawler] Working...");
                arr."array" := g_task_get_fast_arg("net", "rss", this."get_rss"());
                if (arr."empty"()) {
                    this."log"("[Crawler] Failed!");
                } else {
                    this."log"("[Crawler] Fetched rss");
                    var title = arr."get"(0);
                    var len = arr."size"();
                    for (var i = 1; i < len; i++) {
                        var msg = g_create_class(ctx, "string");
                        msg."str" := arr."get"(i);
                        i++;
                        msg."title" := title;
                        msg."desc" := arr."get"(i);
                        this."context"."state_transfer"."on_message"(msg);
                    }
                    this."log"("[Crawler] Completed");
                }
            }
        }
        return next();
    });
}, "app::news::state.base");
/* -----------------------------------------------------------------
# CLASS [app::news::news.context]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::news.context", lambda(this) {
    this."state_main" := _;
    this."state_transfer" := _;
    this."state_crawler" := _;
    this."msg_list" := g_create_class(ctx, "list::array");
    this."add_msg" := lambda(this, msg) -> this."msg_list"."insert"(0, msg);
    this."has_msg" := lambda(this) -> !this."msg_list"."empty"();
    this."start" := lambda(this, output) {
        this."state_main"."on_start"();
        if (g_is_null(this."state_transfer")) {
            var transfer = g_create_class(ctx, "app::news::state.transfer");
            transfer."set_context"(this);
            this."state_transfer" := transfer;
            this."hook_state"(transfer);
            transfer."on_start"();
        }
        if (g_is_null(this."state_crawler")) {
            var crawler = g_create_class(ctx, "app::news::state.crawler");
            crawler."set_context"(this);
            this."state_crawler" := crawler;
            this."hook_state"(crawler);
            crawler."on_start"();
        }
    };
    this."cancel" := lambda(this, shutdown) {
        this."state_base"."on_cancel"(shutdown);
    };
    this."marquee" := lambda(this) -> _;
    this."idle_timer" := g_create_class(ctx, "app::news::util.static_timer");
    this."idle_timer"."set_span"(5);
    this."on_error" := lambda(this, error) -> _;
    this."on_finish" := lambda(this) -> _;
    this."on_progress" := lambda(this, progress) -> _;
    this."on_log" := lambda(this, msg) -> _;
    this."start_state" := lambda(this, state) {
        var _state = g_create_class(ctx, state);
        _state."set_context"(this);
        this."set_state"(_state);
    };
    this."hook_state" := lambda(this, state) {
        // 监听并打印日志
        g_hook_add_before(state, "on_cancel", lambda(class, name, this, next, shutdown) {
            g_printn(class + "::" + name); return next();
        });
        g_hook_add_before(state, "on_message", lambda(class, name, this, next, msg) {
            g_printn(class + "::" + name + " " + msg."str"); return next();
        });
        g_hook_add_before(state, "on_reset", lambda(class, name, this, next) {
            g_printn(class + "::" + name); return next();
        });
        g_hook_add_before(state, "on_start", lambda(class, name, this, next) {
            g_printn(class + "::" + name); return next();
        });
        g_hook_add_before(state, "on_enter", lambda(class, name, this, next) {
            g_printn(class + "::" + name); return next();
        });
        g_hook_add_before(state, "on_timer", lambda(class, name, this, next) {
            return next();
        });
        g_hook_add_before(state, "log", lambda(class, name, this, next, msg) {
            this."context"."on_log"(class + "." + name + " " + msg); return next();
        });
    };
    this."set_state" := lambda(this, state) {
        this."hook_state"(state);
        this."state_main" := state;
        state."on_enter"();
        state."on_start"();
    };
    this."is_open_overlay" := false;
    this."signal" := _;
    this."open_overlay_callback" := lambda(this) {
        g_set_process_desc("news overlay");
        g_printn("Timer overlay started");
        var ms = 400;
        var begin = g_task_get_timestamp();
        var final = begin + 5000;
        var end = begin + ms;
        var signal = this."signal";
        this."output"."write"("Loading...");
        while (true) {
            var s = g_query_share(signal);
            if (g_is_null(s) || !s) {
                g_printdn("NewsApp Overlay interrupt: #" + g_get_pid());
                break;
            }
            begin := g_task_get_timestamp();
            if (final < begin) {
                break;
            }
            if (end < begin) {
                this."output"."write"(".");
                end += ms;
            } else {
                g_sleep(50);
            }
        }
        this."output"."write"("\f");
        g_printn("Timer overlay exit");
        this."is_open_overlay" := true;
    };
    this."open_overlay" := lambda(this) {
        g_create_class(ctx, "system::process")."start_args"(this."open_overlay_callback", this);
    };
    this."close_overlay_callback" := lambda(this) {
        g_set_process_desc("news overlay");
        g_printn("Timer overlay started");
        var ms = 400;
        var begin = g_task_get_timestamp();
        var final = begin + 5000;
        var end = begin + ms;
        var signal = this."signal";
        this."output"."write"("\v");
        this."output"."write"("Closing...");
        while (true) {
            var s = g_query_share(signal);
            if (g_is_null(s) || !s) {
                g_printdn("NewsApp Overlay interrupt: #" + g_get_pid());
                break;
            }
            begin := g_task_get_timestamp();
            if (final < begin) {
                break;
            }
            if (end < begin) {
                this."output"."write"(".");
                end += ms;
            } else {
                g_sleep(50);
            }
        }
        this."output"."write"("\f");
        g_printn("Timer overlay exit");
        this."is_open_overlay" := false;
    };
    this."close_overlay" := lambda(this) {
        g_create_class(ctx, "system::process")."start_args"(this."close_overlay_callback", this);
    };
}, "object");
/* -----------------------------------------------------------------
# CLASS [app::news::news.machine]
----------------------------------------------------------------- */
g_register_class(ctx, "app::news::news.machine", lambda(this) {
    this."timer_thread" := g_create_class(ctx, "system::process");
    this."timer_span" := 500;
    this."output" := _;
    this."signal" := signal;
    this."timer_callback" := lambda(this) {
        g_set_process_desc("news timer");
        g_printn("Timer process started");
        var ms = this."timer_span";
        var begin = g_task_get_timestamp();
        var end = begin + ms;
        var signal = this."signal";
        while (true) {
            var s = g_query_share(signal);
            if (g_is_null(s) || !s) {
                g_printdn("NewsApp Timer interrupt: #" + g_get_pid());
                break;
            }
            begin := g_task_get_timestamp();
            if (end < begin) {
                this."state_main"."on_timer"();
                this."state_transfer"."on_timer"();
                this."state_crawler"."on_timer"();
                end += ms;
            } else {
                g_sleep(50);
            }
        }
        g_printn("Timer process exit");
    };
    this."center" := lambda(this, str) {
        var l = g_ui_text_length(str);
        var space = (70 - l) / 2;
        return g_string_rep(" ", space) + str;
    };
    g_hook_add_before(this, "marquee", lambda(class, name, this, next) {
        var msg = this."msg_list"."pop"();
        this."output"."writeln"("\f" + g_endl);
        this."output"."writeln"(this."center"("【" + msg."title" + "】") + g_endl + g_endl);
        this."output"."writeln"("    " + msg."str" + g_endl);
        this."output"."writeln"("    " + msg."desc" + g_endl);
        this."output"."write"("    \ufff8 \ufff8 \ufff8 \ufff8 \ufff8");
        g_printn("Post message: " + msg."str");
        return 5000;
    });
    g_hook_add_before(this, "start", lambda(class, name, this, next, output) {
        this."output" := output;
        this."start_state"("app::news::state.idle");
        return next();
    });
    g_hook_add_after(this, "start", lambda(class, name, this, ret, next, output) {
        this."timer_thread"."start_args"(this."timer_callback", this);
        return next();
    });
    g_hook_add_before(this, "cancel", lambda(class, name, this, next, shutdown) {
        this."idle_timer"."reset"();
        return next();
    });
    g_hook_add_before(this, "on_log", lambda(class, name, this, next, msg) {
        g_printn(msg); return next();
    });
    this."reset" := lambda(this) {
        this."idle_timer"."reset"();
        this."state_transfer"."on_reset"();
        this."state_crawler"."on_reset"();
    };
}, "app::news::news.context");

// ---- CODE END ----
// -----------------------------------------------------------------------------------------

var machine = g_create_class(ctx, "app::news::news.machine");
var output = g_create_class(ctx, "stream::output");
output."handle" := in;
machine."start"(output);

var typewrite = lambda(out, ch) {
    if (ch == '\ufff8') {
        g_write_pipe(out, '.');
        g_task_sleep_signal(1, signal);
        return;
    }
    g_write_pipe(out, ch);
};
g_read_pipe_args(in, lambda(ch, out) -> typewrite(out, ch), out);

g_stop_share(signal);
g_destroy_pipe(out);
g_destroy_pipe(in);