import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.string";
import "sys.net";

g_set_process_desc("time routine");
var pid = g_get_pid();
var share = g_wait_share("PID#" + pid);
g_stop_share("PID#" + pid);
var args = share["args"];

var in = g_create_pipe("PIPEIN#" + pid);
var out = g_create_pipe("PIPEOUT#" + pid);

var signal = "PIDSIG#" + pid;
g_start_share(signal, true);

var help = func ["HELP"] ~(in, out) {
    g_write_pipe_n(out, "Usage:");
    g_write_pipe_n(out, "---- Create server ----");
    g_write_pipe_n(out, "    msg server [PORT]");
    g_write_pipe_n(out, "  # msg server 7777");
    g_write_pipe_n(out, "  # msg s 7777 (no debug info)");
    g_write_pipe_n(out, "---- Create client ----");
    g_write_pipe_n(out, "    msg connect [IP:PORT]");
    g_write_pipe_n(out, "  # msg connect 127.0.0.1:7777");
    g_destroy_pipe(out);
    g_destroy_pipe(in);
};

if (g_array_size(args) < 2) {
    g_write_pipe_n(out, "Error: missing arguments.");
    return help(in, out);
}

if (g_array_size(args) > 2) {
    g_write_pipe_n(out, "Error: too many arguments.");
    return help(in, out);
}

var pipe = func ["PIPE"] ~(ch, out) {
    g_write_pipe(out, ch);
};

var type = args[0];
if (type == "server" || type == "s") {
    var port = g_string_atoi(args[1]);
    if (port == -1) {
        g_write_pipe_n(out, "Error: invalid port '" + args[1] + "'");
        return help(in, out);
    }
    if (type == "server") { g_write_pipe_n(out, "Using port: " + port); }
    g_printdn("Created server, port: " + port);
    g_net_msg_create_server(in, out, signal, port, type == "server");
} else if (type == "connect") {
    var addr = args[1];
    g_write_pipe_n(out, "Using address: " + addr);
    g_printdn("Created client, address: " + addr);
    g_net_msg_create_client(in, out, signal, addr, type == "connect");
} else {
    g_write_pipe_n(out, "Error: invalid command '" + type + "'");
    return help(in, out);
}

g_stop_share(signal);

g_destroy_pipe(out);
g_destroy_pipe(in);