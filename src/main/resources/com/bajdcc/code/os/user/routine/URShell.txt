import "sys.base";
import "sys.list";
import "sys.string";
import "sys.proc";
import "sys.task";
import "sys.ui";
import "sys.net";
import "sys.file";

if (!g_is_null(g_query_share("cmd#histroy"))) {
    var pid = g_get_pid();
    var in = g_create_pipe("PIPEIN#" + pid);
    var out = g_create_pipe("PIPEOUT#" + pid);
    g_destroy_pipe(out);
    g_destroy_pipe(in);
    return;
}

// PRINT WELCOME
var welcome = func ["WELCOME"] ~() {
    while (g_is_null(g_task_get_fast("system", "guid"))) {
        g_sleep(10);
    }
    g_ui_print("                   ");
    g_ui_fgcolor(106, 0, 122);
    g_ui_bgcolor(230, 230, 230);
    g_ui_printn("--== jMiniOS 脚本操作系统 Made by bajdcc ==--");
    g_ui_bgclear();
    g_ui_fgcolor(0, 0, 255);
    g_read_file_s_utf8("!/com/bajdcc/code/fs/logo.txt", lambda(s) -> g_ui_printn(s));
    g_ui_printn("      唯一标识： " + g_task_get_fast("system", "guid") + g_endl + g_endl);
    g_ui_fgclear();
    g_printn("Running...");
};
g_join_process(g_create_user_process(welcome));
g_start_share("cmd#histroy", g_new_array);
g_start_share("PIPE#HANDLE", g_new_array);

var parse_cmd_1 = func ["PARSE"] ~(arg) {
    var pid = g_get_pid();
    var parse = arg["parse"];
    var cmd = arg["args"];
    var parent = arg["parent"];
    var exe = g_array_pop(cmd);
    exe := g_string_trim(exe);
    var _args = g_string_split(exe, " ");
    var args = [];
    foreach (var s : g_range_array(_args)) {
        var ss = g_string_trim(s);
        if (!g_string_empty(ss)) {
            g_array_add(args, ss);
        }
    }
    var exec = args[0];
    g_array_remove(args, 0);
    var share = {};
    g_map_put(share, "args", args);
    g_set_process_desc("host: " + exec);
    var path = "/usr/p/" + exec;
    var child = g_load_user_x(path);
    g_start_share("PID#" + child, share);
    if (child+1 == 0) {
        g_ui_fgcolor(255, 0, 0);
        g_ui_printn("不能执行程序 “"+path+"”");
        g_ui_fgclear();
        var p = g_wait_pipe("PIPEIN#" + parent);
        g_sleep(50);
        g_destroy_pipe(p);
        return;
    }
    g_map_put(share, "child", child);
    var k = g_null;
    if (g_array_size(cmd) > 0) {
        k := g_create_user_process_args(parse, {"parse": parse, "args": cmd, "parent": child});
    }
    var in = g_create_pipe("PIPEIN#" + parent);
    var out = g_create_pipe("PIPEOUT#" + child);
    var handles = g_query_share("PIPE#HANDLE");
    g_array_add(handles, child);
    var f1 = func ~(ch, in) {
        g_write_pipe(in, ch);
    };
    g_read_pipe_args(out, f1, in);
    g_join_process(child);
    if (!g_is_null(k)) {
        g_join_process(k);
    }
    var ct = g_query_share("PIPE#CTRL");
    if (!g_array_empty(ct) && ct[0] == 'C') {
        g_printdn("#" + g_get_pid() + " Force kill!");
        g_destroy_pipe_once(in);
        g_printdn("#" + g_get_pid() + " Force kill! ok");
    } else {
        g_printdn("#" + g_get_pid() + " Safe kill!");
        g_destroy_pipe(in);
        g_printdn("#" + g_get_pid() + " Safe kill! ok");
    }
};

var parse_cmd = func ["PARSE"] ~(cmd, parse) {
    var pid = g_get_pid();
    var exe = g_array_pop(cmd);
    exe := g_string_trim(exe);
    var _args = g_string_split(exe, " ");
    var args = [];
    foreach (var s : g_range_array(_args)) {
        var ss = g_string_trim(s);
        if (!g_string_empty(ss)) {
            g_array_add(args, ss);
        }
    }
    var exec = args[0];
    g_array_remove(args, 0);
    var share = {};
    g_map_put(share, "args", args);
    g_set_process_desc("host: " + exec);
    var path = "/usr/p/" + exec;
    var child = g_load_user_x(path);
    if (child+1 == 0) {
        g_ui_fgcolor(255, 0, 0);
        g_ui_printn("不能执行程序 “"+path+"”");
        g_ui_fgclear();
        return;
    }
    g_start_share("PID#" + child, share);
    var array = [];
    g_create_share("PIPE#CTRL", array);
    g_create_share("PIPE#HANDLE", g_new_array);
    var k = g_null;
    if (g_array_size(cmd) > 0) {
        k := g_create_user_process_args(parse, {"parse": parse, "args": cmd, "parent": child});
    }
    var f = func ~(ch) -> g_ui_print(ch);
    var out = g_wait_pipe("PIPEOUT#" + child);
    var handles = g_query_share("PIPE#HANDLE");
    var ctrl = func ~() {
        g_set_process_desc("shell control");
        var fn = func ~(ch) {
            var hs = g_query_share("PIPE#HANDLE");
            var kill = false;
            if (ch == 'C') { kill := true; }
            if (ch == 'A' && !g_live_process_array(hs)) {
                ch := 'C';
            }
            if (ch == 'C') {
                g_printdn("#" + g_get_pid() + " Force kill!");
                foreach (var hh : g_range_array(hs)) {
                    g_destroy_pipe_by_name_once("PIPEIN#" + hh);
                    if (kill) { g_create_share("PIDSIG#" + hh, false); }
                }
                g_join_process_array(hs);
                var pp = g_wait_pipe("SYS#INPUT");
                g_destroy_pipe_once(pp);
                g_printdn("#" + g_get_pid() + " Force kill! ok");
            } else if (ch == 'A') {
                g_printdn("#" + g_get_pid() + " Safe kill!");
                g_join_process_array(hs);
                var pp = g_wait_pipe("SYS#INPUT");
                g_destroy_pipe_once(pp);
                g_printdn("#" + g_get_pid() + " Safe kill! ok");
            }
        };
        var handle = g_create_pipe("SYS#INPUT");
        g_read_pipe(handle, fn);
    };
    g_array_add(handles, child);
    var ctrl_handle = g_create_user_process(ctrl);
    var inputd = func ~(arr) {
        g_set_process_desc("shell input");
        g_ui_inputd("SYS#INPUT", arr);
    };
    var inputd_handle = g_create_user_process_args(inputd, array);
    g_read_pipe(out, f);
    g_join_process_array(handles);
    if (!g_is_null(k)) {
        g_join_process(k);
    }
    g_array_add(array, 'A');
    g_join_process(inputd_handle);
    g_join_process(ctrl_handle);
};

var task_native = func ~(tid, msg, arg) {
    if (g_is_null(tid) || g_is_null(msg)) { return; }
    if (tid == "net") {
        if (msg == "sshd") {
            return g_to_string(g_net_sshd(arg));
        }
    }
};

// TASK FAST INVOKER
var task_fast_invoker = func ~(cmd, arg) {
    cmd := g_string_right(cmd, 1);
    g_array_remove(arg, 0);
    if (g_array_size(arg) == 1) {
        return g_task_get_fast(cmd, arg[0]);
    } else if (g_array_size(arg) == 2) {
        var ret = task_native(cmd, arg[0], arg[1]);
        if (g_is_null(ret)) {
            return g_task_get_fast_arg(cmd, arg[0], arg[1]);
        }
        return ret;
    } else {
        var msg = arg[0];
        g_array_remove(arg, 0);
        var ret = task_native(cmd, msg, arg);
        if (g_is_null(ret)) {
            return g_task_get_fast_args(cmd, msg, arg);
        }
        return ret;
    }
};

// TASK COMMAND
var handle_task_command = func ~(arg) {
    var arr = g_string_split(arg, " ");
    var cmd = arr[0];
    if (g_string_start_with(cmd, "@")) {
        return task_fast_invoker(cmd, arr);
    }
};

// GET STDIO cmd
var get_input = func ["INPUT"] ~(arg) {
    g_set_process_desc("shell routine");
    var this = arg[0];
    var parse = arg[1];
    g_ui_fgcolor(47, 18, 2);
    g_ui_print("$");
    g_ui_fgclear();
    g_ui_print(" \uffef");
    g_sleep(400);
    var str = g_ui_input();
    var cmd = "";
    while (g_string_end_with(str, "\\")) {
        str := g_string_trim(str);
        str := g_string_substr(str, 0, g_string_length(str) - 1);
        cmd += str;
        g_ui_print("\uffef");
        str := g_ui_input();
    }
    str := g_string_trim(str);
    cmd += str;
    if (g_string_length(cmd) == 0) {
        g_ui_fgcolor(255, 0, 0);
        g_ui_printn("错误：没有输入指令");
        g_ui_fgclear();
        g_create_user_process_args(this, arg);
        return;
    }
    if (cmd == "exit") {
        g_ui_printn("** System is going to power off! **");
        var handle = g_create_pipe("int#3");
        g_write_pipe(handle, 'E');
        return;
    }
    g_printn("*** Input: " + cmd);
    if (g_string_start_with(cmd, "@")) {
        var ret = handle_task_command(cmd);
        if (g_is_null(ret)) {
            g_ui_fgcolor(255, 0, 0);
            g_ui_printn("命令有误");
            g_ui_fgclear();
        } else {
            g_ui_printn(g_to_string(ret));
        }
        if (g_is_null(g_query_share("CMD#EXIT"))) {
            g_create_user_process_args(this, arg);
        } else {
            g_stop_share("CMD#EXIT");
        }
    } else {
        cmd := g_string_split(cmd, "\\|");
        parse_cmd(cmd, parse);
        g_create_user_process_args(this, arg);
    }
};
g_create_user_process_args(get_input, [get_input, parse_cmd_1]);