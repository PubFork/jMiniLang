import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.string";
import "sys.class";
import "std.base";
import "std.shell";

g_set_process_desc("bash routine");
var pid = g_get_pid();
var share = g_wait_share("PID#" + pid);
g_stop_share("PID#" + pid);
var args = share["args"];

var in = g_create_pipe("PIPEIN#" + pid);
var out = g_create_pipe("PIPEOUT#" + pid);

var signal = "PIDSIG#" + pid;
g_start_share(signal, true);

var ctx = g_create_context();
g_import_std_base(ctx);
g_import_std_shell(ctx);

var buf = [];
var shell = g_create_class(ctx, "system::shell");
set shell::"out" = out;
var pipe = func ["PIPE"] ~(ch, out) {
    if (ch == '\n') {
        var cmd = g_string_build(buf);
        shell."exec"(cmd);
        g_array_clear(buf);
    } else if (ch == '\r') {
    } else {
        g_array_add(buf, ch);
    }
};

g_read_pipe_args(in, pipe, out);

g_stop_share(signal);
g_destroy_pipe(out);
g_destroy_pipe(in);