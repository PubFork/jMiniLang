import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.string";
var g_ui_print = func ~(str) {
    var ui_int = g_create_pipe("int#2");
    foreach (var c : g_range_string(str)) {
        g_write_pipe(ui_int, c);
    }
};
export "g_ui_print";
var g_ui_printn = func ~(str) {
    g_ui_println(str);
};
export "g_ui_printn";
var g_ui_println = func ~() {
    var c = g_args_count();
    if (c == 0) {
        g_ui_print(g_endl);
        return;
    }
    for (var i = 0; i < c; i++) {
        g_ui_print(g_args_index(i));
        g_ui_print(g_endl);
    }
};
export "g_ui_println";
var g_ui_print_safe = func ~(str) {
    var ui_int = g_create_pipe("int#2");
    g_lock_share("UI#MUTEX");
    foreach (var c : g_range_string(str)) {
        g_write_pipe(ui_int, c);
    }
    g_unlock_share("UI#MUTEX");
};
export "g_ui_print_safe";
var g_ui_printn_safe = func ~(str) {
    g_ui_print_safe(str);
    g_ui_println_safe();
};
export "g_ui_printn_safe";
var g_ui_println_safe = func ~() {
    g_ui_print_safe(g_endl);
};
export "g_ui_println_safe";
var ui_input_mark = func ~() {
    g_empty_pipe("int#2");
    g_ui_input_mark();
};
var g_ui_input = func ~() {
    g_ui_caret(true);
    var h = g_query_share("cmd#histroy");
    for (;;) {
        var s = g_ui_input_internal();
        if (!g_is_null(s)) {
            while (!g_ui_caret(false)) {};
            g_ui_println();
            g_array_add(h, s);
            return s;
        }
        var c = g_ui_print_input();
        if (!g_is_null(c)) {
            if (c == '\ufff0') {
                if (!g_array_empty(h)) {
                    var old = g_array_pop(h);
                    g_ui_fallback();
                    g_ui_input_queue(old);
                }
            } else if (c == '\uffee') {
                while (!g_ui_caret(false)) {};
                g_ui_println();
                return g_ui_input_im();
            } else {
                g_ui_print(c);
            }
        }
    }
};
export "g_ui_input";
var g_ui_inputd = func ~(callback, arr) {
    var handle = g_wait_pipe(callback);
    while (g_array_size(arr) == 0) {
        var c = g_ui_print_input();
        if (!g_is_null(c)) {
            if (c == '\uffee') {
                g_array_add(arr, 'C');
                break;
            }
        }
    }
    g_write_pipe(handle, arr[0]);
};
export "g_ui_inputd";
var g_ui_print_internal = func ~(ch) {
    while (g_ui_print_internal_block(ch)) {}
};
export "g_ui_print_internal";
var g_ui_fgcolor = func ~(r, g, b) {
    g_ui_print("" + '\uffd2' + ('\ufd00' + r) + ('\ufd00' + g) + ('\ufd00' + b));
};
export "g_ui_fgcolor";
var g_ui_bgcolor = func ~(r, g, b) {
    g_ui_print("" + '\uffd3' + ('\ufd00' + r) + ('\ufd00' + g) + ('\ufd00' + b));
};
export "g_ui_bgcolor";
var g_ui_fgclear = func ~() {
    g_ui_fgcolor(0, 0, 0);
};
export "g_ui_fgclear";
var g_ui_bgclear = func ~() {
    g_ui_bgcolor(255, 255, 255);
};
export "g_ui_bgclear";
var g_ui_fg = func ~(r, g, b) -> "" + '\uffd2' + ('\ufd00' + r) + ('\ufd00' + g) + ('\ufd00' + b);
export "g_ui_fg";
var g_ui_bg = func ~(r, g, b) -> "" + '\uffd3' + ('\ufd00' + r) + ('\ufd00' + g) + ('\ufd00' + b);
export "g_ui_bg";
var g_ui_fgc = func ~() -> g_ui_fg(0, 0, 0);
export "g_ui_fgc";
var g_ui_bgc = func ~() -> g_ui_bg(255, 255, 255);
export "g_ui_bgc";
var g_ui_dialog = func ~(caption, text, mode) {
    var handle = g_ui_create_dialog_internal(caption, text, mode);
    if (!g_is_valid_handle(handle)) {
        throw "Create dialog failed.";
    }
    var share_name = "DIALOG#DATA#" + g_to_string(handle);
    var share = [];
    g_start_share(share_name, share);
    var mutex_name = "DIALOG#SIG#" + g_to_string(handle);
    var mutex = g_use_mutex(mutex_name);
    g_ui_show_dialog_internal(handle);
    g_lock_mutex(mutex);
    g_destroy_mutex(mutex);
    g_stop_share(share_name);
    return share;
};
export "g_ui_dialog";