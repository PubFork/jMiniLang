import "sys.base";
import "sys.proc";
import "sys.list";
import "sys.func";
import "sys.string";
import "sys.class";

var _;

// -----------------------------------------------------------------------------------------
// LINQ Design
// @ Refer: https://github.com/vczh-libraries/vlpp
// ---- CODE BEGIN ----

var import_linq_class = func ~() {

    // LINQ Operator Class

    g_class("linq::class", "object", lambda(this) {
        this."__doc__" := "LINQ接口";
        this."__from_array" := lambda(this, arr) ->
            g_new_class_init("linq::from.iterator::enumerable", [["__array__", arr]], []);
        this."cast_array" := lambda(this, arr) -> g_new_class_init("list::array", [["array", arr]], []);
        this."from" := lambda(this, arr) {
            var t = g_get_type_ordinal(arr);
            if (t == 9) {
                return this."__from_array"(this."cast_array"(arr));
            } else if (t == 10) {
                if (g_is_null(arr["__type__"]) || arr."__type__" != "list::array") {
                    throw "LINQ ERROR: " + "<From> Invalid class type";
                }
                return this."__from_array"(arr);
            } else {
                throw "LINQ ERROR: " + "<From> Invalid type";
            }
        };
        this."range" := lambda(this, begin, end) ->
            g_new_class_init("linq::lazy::enumerable", [["__enumerator__",
                g_new_class_init("linq::range::enumerator", [], [["init", begin, end]])]], []);
    });

    // Enumerator Class

    g_class("linq::enumerator", "object", lambda(this) {
        this."__doc__" := "枚举器接口";
        this."current" := lambda(this) -> _; // 当前指针所在元素
        this."index" := lambda(this) -> _; // 当前位置
        this."next" := lambda(this) -> _; // 指针指向下一个，返回是否还有元素
        this."reset" := lambda(this) -> _; // 重置
        this."clone" := lambda(this) -> _; // 拷贝
    });

    g_class("linq::array::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "数组枚举器";
        this."__array__" := _; // 包装的数组
        this."__index__" := -1; // 访问的索引
        this."current" := lambda(this) -> this."__array__"."get"(this."__index__");
        this."index" := lambda(this) -> this."__index__";
        this."next" := lambda(this) {
            var idx = this."__index__" + 1;
            var res = idx >= 0 && idx < this."__array__"."size"();
            if (res) { this."__index__" := idx; return true; }
            return false;
        };
        this."reset" := lambda(this) -> this."__index__" := -1;
        this."clone" := lambda(this) ->
            g_new_class_init("linq::array::enumerator", [["__array__", this."__array__"]], []);
    });

    g_class("linq::range::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "范围枚举器";
        this."__dir__" := _; // 是否正序
        this."__begin__" := _; // 起点
        this."__end__" := _; // 终点
        this."__index__" := _; // 当前位置
        this."init" := lambda(this, begin, end) {
            if (this."__dir__" := begin <= end) {
                this."__begin__" := begin;
                this."__end__" := end;
                this."__index__" := begin - 1;
            } else {
                this."__begin__" := end;
                this."__end__" := begin;
                this."__index__" := begin + 1;
            }
        };
        this."current" := lambda(this) -> this."__index__";
        this."index" := lambda(this) ->
            this."__dir__" ? (this."__index__" - this."__begin__") : (this."__end__" - this."__index__");
        this."next" := lambda(this) {
            var idx = this."__dir__" ? (this."__index__" + 1) : (this."__index__" - 1);
            var res = idx >= this."__begin__" && idx <= this."__end__";
            if (res) { this."__index__" := idx; return true; }
            return false;
        };
        this."reset" := lambda(this) {
            if (this."__dir__") {
                this."__index__" := this."__begin__" - 1;
            } else {
                this."__index__" := this."__end__" + 1;
            }
        };
        this."clone" := lambda(this) ->
            g_new_class_init("linq::range::enumerator", [], [
                this."__dir__" ? ["init", this."__begin__", this."__end__"] : ["init", this."__end__", this."__begin__"]]);
    });

    g_class("linq::select::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "选择器";
        this."__enumerator__" := _; // 包装的枚举器
        this."__current__" := _; // 当前元素
        this."__select__" := g_func_1; // 选择函数
        this."current" := lambda(this) -> this."__current__";
        this."index" := lambda(this) -> this."__enumerator__"."index"();
        this."next" := lambda(this) {
            if (this."__enumerator__"."next"()) {
                var f = this."__select__";
                this."__current__" := f(this."__enumerator__"."current"());
                return true;
            }
            return false;
        };
        this."reset" := lambda(this) -> this."__enumerator__"."reset"();
        this."clone" := lambda(this) ->
            g_new_class_init("linq::select::enumerator",
                [["__enumerator__", this."__enumerator__"."clone"()], ["__select__", this."__select__"]], []);
    });

    g_class("linq::where::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "过滤器";
        this."__enumerator__" := _; // 包装的枚举器
        this."__index__" := -1; // 当前索引
        this."__where__" := g_func_always_true; // 过滤函数
        this."current" := lambda(this) -> this."__enumerator__"."current"();
        this."index" := lambda(this) -> this."__index__";
        this."next" := lambda(this) {
            while (this."__enumerator__"."next"()) {
                var f = this."__where__";
                if (f(this."__enumerator__"."current"())) {
                    this."__index__"++;
                    return true;
                }
            }
            return false;
        };
        this."reset" := lambda(this) {
            this."__enumerator__"."reset"();
            this."__index__" := -1;
        };
        this."clone" := lambda(this) ->
            g_new_class_init("linq::where::enumerator",
                [["__enumerator__", this."__enumerator__"."clone"()], ["__where__", this."__where__"]], []);
    });

    g_class("linq::concat::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "连接器";
        this."__enumerator1__" := _; // 包装的枚举器1
        this."__enumerator2__" := _; // 包装的枚举器2
        this."__index__" := -1; // 当前索引
        this."__use1__" := true; // 是否使用枚举器1
        this."current" := lambda(this) -> this."__use1__" ? this."__enumerator1__"."current"() : this."__enumerator2__"."current"();
        this."index" := lambda(this) -> this."__index__";
        this."next" := lambda(this) {
            if (this."__use1__") {
                if (this."__enumerator1__"."next"()) {
                    this."__index__"++;
                    return true;
                }
                this."__use1__" := false;
                return this."next"();
            } else {
                if (this."__enumerator2__"."next"()) {
                    this."__index__"++;
                    return true;
                }
                return false;
            }
        };
        this."reset" := lambda(this) {
            this."__enumerator1__"."reset"();
            this."__enumerator2__"."reset"();
            this."__index__" := -1;
            this."__use1__" := true;
        };
        this."clone" := lambda(this) ->
            g_new_class_init("linq::concat::enumerator",
                [["__enumerator1__", this."__enumerator1__"."clone"()],
                 ["__enumerator2__", this."__enumerator2__"."clone"()],
                 ["__index__", this."__index__"], ["__use1__", this."__use1__"]], []);
    });

    g_class("linq::take::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "挑选";
        this."__enumerator__" := _; // 包装的枚举器
        this."__count__" := -1; // 指定数量
        this."current" := lambda(this) -> this."__enumerator__"."current"();
        this."index" := lambda(this) -> this."__enumerator__"."index"();
        this."next" := lambda(this) {
            if (this."index"() < this."__count__" - 1) {
                return this."__enumerator__"."next"();
            }
            return false;
        };
        this."reset" := lambda(this) {
            this."__enumerator__"."reset"();
        };
        this."clone" := lambda(this) ->
            g_new_class_init("linq::take::enumerator",
                [["__enumerator__", this."__enumerator__"."clone"()], ["__count__", this."__count__"]], []);
    });

    g_class("linq::skip::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "跳过";
        this."__enumerator__" := _; // 包装的枚举器
        this."__count__" := -1; // 指定数量
        this."__skipped__" := false; // 是否跳过
        this."current" := lambda(this) -> this."__enumerator__"."current"();
        this."index" := lambda(this) -> this."__enumerator__"."index"() - this."__count__";
        this."next" := lambda(this) {
            if (!this."__skipped__") {
                this."__skipped__" := true;
                var count = this."__count__";
                for (var i = 0; i < count; i++) {
                    if (!this."__enumerator__"."next"()) {
                        return false;
                    }
                }
            }
            return this."__enumerator__"."next"();
        };
        this."reset" := lambda(this) {
            this."__enumerator__"."reset"();
            this."__skipped__" := false;
        };
        this."clone" := lambda(this) ->
            g_new_class_init("linq::skip::enumerator",
                [["__enumerator__", this."__enumerator__"."clone"()],
                ["__count__", this."__count__"], ["__skipped__", this."__skipped__"]], []);
    });

    g_class("linq::repeat::enumerator", "linq::enumerator", lambda(this) {
        this."__doc__" := "重复";
        this."__enumerator__" := _; // 包装的枚举器
        this."__count__" := -1; // 指定数量
        this."__index__" := -1; // 当前位置
        this."__repeat_count__" := 0; // 已重复次数
        this."current" := lambda(this) -> this."__enumerator__"."current"();
        this."index" := lambda(this) -> this."__index__";
        this."next" := lambda(this) {
            while (this."__repeat_count__" <this."__count__") {
                if (this."__enumerator__"."next"()) {
                    this."__index__"++;
                    return true;
                }
                this."__repeat_count__"++;
                this."__enumerator__"."reset"();
            }
            return false;
        };
        this."reset" := lambda(this) {
            this."__enumerator__"."reset"();
            this."__index__" := -1;
            this."__repeat_count__" := 0;
        };
        this."clone" := lambda(this) ->
            g_new_class_init("linq::repeat::enumerator",
                [["__enumerator__", this."__enumerator__"."clone"()],
                ["__count__", this."__count__"], ["__index__", this."__index__"],
                ["__repeat_count__", this."__repeat_count__"]], []);
    });

    // Enumerable Class

    g_class("linq::enumerable", "linq::class", lambda(this) {
        this."__doc__" := "可枚举接口";
        this."enumerator" := lambda(this) -> _; // 创建枚举器
        this."select" := lambda(this, f) ->
            g_new_class_init("linq::lazy::enumerable", [["__enumerator__",
                g_new_class_init("linq::select::enumerator",
                    [["__enumerator__", this."enumerator"()], ["__select__", f]], [])]], []);
        this."where" := lambda(this, f) ->
            g_new_class_init("linq::lazy::enumerable", [["__enumerator__",
                g_new_class_init("linq::where::enumerator",
                    [["__enumerator__", this."enumerator"()], ["__where__", f]], [])]], []);
        this."concat" := lambda(this, x) ->
            g_new_class_init("linq::lazy::enumerable", [["__enumerator__",
                g_new_class_init("linq::concat::enumerator",
                    [["__enumerator1__", this."enumerator"()], ["__enumerator2__", x."enumerator"()]], [])]], []);
        this."take" := lambda(this, n) ->
            g_new_class_init("linq::lazy::enumerable", [["__enumerator__",
                g_new_class_init("linq::take::enumerator",
                    [["__enumerator__", this."enumerator"()], ["__count__", n]], [])]], []);
        this."skip" := lambda(this, n) ->
            g_new_class_init("linq::lazy::enumerable", [["__enumerator__",
                g_new_class_init("linq::skip::enumerator",
                    [["__enumerator__", this."enumerator"()], ["__count__", n]], [])]], []);
        this."repeat" := lambda(this, n) ->
            g_new_class_init("linq::lazy::enumerable", [["__enumerator__",
                g_new_class_init("linq::repeat::enumerator",
                    [["__enumerator__", this."enumerator"()], ["__count__", n]], [])]], []);

        this."count" := lambda(this) {
            var count = 0;
            var enumerator = this."enumerator"();
            while (enumerator."next"()) {
                count++;
            }
            return count;
        };
        this."empty" := lambda(this) -> this."enumerator"()."next"();
        this."first" := lambda(this) {
            var enumerator = this."enumerator"();
            if (enumerator."next"()) {
                return enumerator."current"();
            }
            throw "LINQ::FIRST Error: empty list";
        };
        this."first_or_default" := lambda(this, def) {
            var enumerator = this."enumerator"();
            if (enumerator."next"()) {
                return enumerator."current"();
            }
            return def;
        };
        this."last" := lambda(this) {
            var enumerator = this."enumerator"();
            if (enumerator."next"()) {
                var current = enumerator."current"();
                while (enumerator."next"()) {
                    current := enumerator."current"();
                }
                return current;
            }
            throw "LINQ::LAST Error: empty list";
        };
        this."last_or_default" := lambda(this, def) {
            var enumerator = this."enumerator"();
            var current = def;
            while (enumerator."next"()) {
                current := enumerator."current"();
            }
            return current;
        };

        this."aggregate" := lambda(this, f) {
            var enumerator = this."enumerator"();
            if (enumerator."next"()) {
                var current = enumerator."current"();
                while (enumerator."next"()) {
                    current := f(current, enumerator."current"());
                }
                return current;
            }
            throw "LINQ::AGGREGATE Error: empty list";
        };
        this."aggregate_seed" := lambda(this, init, f) {
            var enumerator = this."enumerator"();
            var current = init;
            while (enumerator."next"()) {
                current := f(current, enumerator."current"());
            }
            return current;
        };
        this."max" := lambda(this) -> this."aggregate"(g_func_max);
        this."min" := lambda(this) -> this."aggregate"(g_func_min);
        this."sum" := lambda(this) -> this."aggregate_seed"(0, g_func_add);
        this."product" := lambda(this) -> this."aggregate_seed"(1, g_func_mul);
        this."all" := lambda(this, f) -> this."select"(f)."aggregate_seed"(true, g_func_and);
        this."any" := lambda(this, f) -> this."select"(f)."aggregate_seed"(false, g_func_or);
        this."select_many" := lambda(this, f) -> this."select"(f)."aggregate_seed"(this."from"([]), lambda(a, b) -> a."concat"(b));
        this."union" := lambda(this, x) -> this."concat"(x)."distinct"();
        this."to_list" := lambda(this) -> this."aggregate_seed"([], lambda(a, b) -> g_array_add(a, b));
        this."distinct" := lambda(this) -> this."from"(g_array_distinct(this."to_list"())); // 暂时用内置的去重算法
        this."group_by" := lambda(this, f) {
            var s = this."select"(f)."distinct"();
            var se = s."enumerator"();
            var a = g_new_class("list::array");
            while (se."next"()) {
                var sec = se."current"();
                var v = this."where"(lambda(a) -> sec == f(a))."select"(f);
                a."add"({"key": sec, "value": v});
            }
            return this."from"(a);
        };

        this."for_each" := lambda(this, f) {
            var enumerator = this."enumerator"();
            while (enumerator."next"()) {
                f(enumerator."index"(), enumerator."current"());
            }
        };
    });

    g_class("linq::from.iterator::enumerable", "linq::enumerable", lambda(this) {
        this."__doc__" := "<From>枚举接口";
        this."__array__" := _; // 包装的数组
        this."enumerator" := lambda(this) ->
            g_new_class_init("linq::array::enumerator", [["__array__", this."__array__"]], []);
    });

    g_class("linq::lazy::enumerable", "linq::enumerable", lambda(this) {
        this."__doc__" := "<Lazy>惰性计算枚举接口";
        this."__enumerator__" := _; // 包装的枚举器
        this."enumerator" := lambda(this) -> this."__enumerator__"."clone"();
    });
};

// ---- CODE END ----
// -----------------------------------------------------------------------------------------


var import_list_class = func ~() {
    var to_string = func to_string(exp) {
        if (g_get_type_ordinal(exp) == 9) {
            return "[" + g_string_join_array(g_func_map(exp, to_string), ", ") + "]";
        } else {
            return g_to_string(exp);
        }
    };
    g_class("list::array", "linq::enumerable", lambda(this) {
        this."__doc__" := "数组";
        this."array" := g_new_array;
        this."add" := lambda(this, obj) -> g_array_add(this."array", obj);
        this."contains" := lambda(this, obj) -> g_array_contains(this."array", obj);
        this."append" := lambda(this, obj) -> g_array_append(this."array", obj);
        this."insert" := lambda(this, i, obj) -> g_array_insert(this."array", i, obj);
        this."set" := lambda(this, i, obj) -> g_array_set(this."array", i, obj);
        this."pop" := lambda(this) -> g_array_pop(this."array");
        this."clear" := lambda(this) -> g_array_clear(this."array");
        this."reverse" := lambda(this) -> g_array_reverse(this."array");
        this."get" := lambda(this, obj) -> g_array_get(this."array", obj);
        this."get_ex" := lambda(this, obj) -> g_array_get_ex(this."array", obj);
        this."size" := lambda(this) -> g_array_size(this."array");
        this."remove" := lambda(this, i) -> g_array_remove(this."array", i);
        this."delete" := lambda(this, obj) -> g_array_delete(this."array", obj);
        this."empty" := lambda(this) -> g_array_empty(this."array");
        this."fill" := lambda(this, obj) -> g_array_fill(this."array", obj);
        this."distinct" := lambda(this) -> g_array_distinct(this."array");
        this."enumerator" := lambda(this) ->
            g_new_class_init("linq::array::enumerator", [["__array__", this]], []);
        this."to_string" := lambda(this) -> to_string(this."array");
    });
    g_class("list::map", "object", lambda(this) {
        this."map" := g_new_map;
        this."keys" := lambda(this) -> g_map_keys(this."map");
        this."values" := lambda(this) -> g_map_values(this."map");
        this."put" := lambda(this, k, v) -> g_map_put(this."map", k, v);
        this."contains" := lambda(this, obj) -> g_map_contains(this."map", obj);
        this."get" := lambda(this, obj) -> g_map_get(this."map", obj);
        this."size" := lambda(this) -> g_map_size(this."map");
        this."remove" := lambda(this, obj) -> g_map_remove(this."map", obj);
        this."clear" := lambda(this) -> g_map_clear(this."map");
        this."empty" := lambda(this) -> g_map_empty(this."map");
    });
};

var import_string_class = func ~() {
    g_class("string", "object", lambda(this) {
        this."str" := "";
        this."replace" := lambda(this, from, to) -> g_string_replace(this."str", from, to);
        this."split" := lambda(this, delim) -> g_string_split(this."str", delim);
        this."splitn" := lambda(this, delim, n) -> g_string_splitn(this."str", delim, n);
        this."trim" := lambda(this) -> g_string_trim(this."str");
        this."length" := lambda(this) -> g_string_length(this."str");
        this."size" := lambda(this) -> g_string_length(this."str");
        this."get" := lambda(this, i) -> g_string_get(this."str", i);
        this."empty" := lambda(this) -> g_string_empty(this."str");
        this."regex" := lambda(this, regex) -> g_string_regex(this."str", regex);
        this."atoi" := lambda(this) -> g_string_atoi(this."str");
        this."atoi_s" := lambda(this) -> g_string_atoi_s(this."str");
        this."to_upper" := lambda(this) -> g_string_toupper(this."str");
        this."to_lower" := lambda(this) -> g_string_tolower(this."str");
        this."to_number" := lambda(this) -> g_string_to_number(this."str");
        this."start_with" := lambda(this, obj) -> g_string_start_with(this."str", obj);
        this."substr" := lambda(this, start, end) -> g_string_substr(this."str", start, end);
        this."left" := lambda(this, n) -> g_string_left(this."str", n);
        this."right" := lambda(this, n) -> g_string_right(this."str", n);
    });
};

var import_stream_class = func ~() {
    g_class("stream::input", "object", lambda(this) {
        this."handle" := g_null;
        this."read" := lambda(this) -> g_read_pipe_once(this."handle");
        this."destroy" := lambda(this) -> g_destroy_pipe(this."handle");
    });
    g_class("stream::output", "object", lambda(this) {
        this."handle" := g_null;
        this."write" := lambda(this, ch) -> g_write_pipe(this."handle", ch);
        this."writeln" := lambda(this, ch) -> g_write_pipe_n(this."handle", ch);
        this."destroy" := lambda(this) -> g_destroy_pipe(this."handle");
    });
};

var import_process_class = func ~() {
    g_class("system::process", "object", lambda(this) {
        this."handle" := g_nullptr;
        this."entry" := g_null;
        this."start" := lambda(this, entry) {
            if (g_is_valid_handle(this."handle")) { return; }
            this."entry" := entry;
            this."handle" := g_create_user_process(entry);
        };
        this."start_args" := lambda(this, entry, args) {
            if (g_is_valid_handle(this."handle")) { return; }
            this."entry" := entry;
            this."handle" := g_create_user_process_args(entry, args);
        };
        this."stop" := lambda(this) {
            if (!g_is_valid_handle(this."handle")) { return; }
            g_join_process(this."handle");
        };
    });
};

var g_import_std_base = func ~() {
    if (g_map_contains(g_class_context, "object")) {
        return;
    }
    // Base class: object
    g_class("object", g_null, lambda(this) {
        this."type" := "object";
        this."to_string" := lambda(this) -> this."__type__";
    });
    // List
    import_list_class();
    // LINQ
    import_linq_class();
    // String
    import_string_class();
    // Process
    import_process_class();
    // Stream
    import_stream_class();
};
export "g_import_std_base";