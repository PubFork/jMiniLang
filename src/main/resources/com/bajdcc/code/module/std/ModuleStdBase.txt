import "sys.base";
import "sys.proc";
import "sys.list";
import "sys.func";
import "sys.string";
import "sys.class";

var _ = g_null;

var import_list_class = func ~(ctx) {
    var to_string = func to_string(exp) {
        if (g_get_type_ordinal(exp) == 9) {
            return "[" + g_string_join_array(g_func_map(exp, to_string), ", ") + "]";
        } else {
            return g_to_string(exp);
        }
    };
    g_register_class(ctx, "linq::enumerator", lambda(this) {
        this."__doc__" := "枚举器接口";
        this."current" := lambda(this) -> _; // 当前指针所在元素
        this."index" := lambda(this) -> _; // 当前位置
        this."next" := lambda(this) -> _; // 指针指向下一个，返回是否还有元素
        this."reset" := lambda(this) -> _; // 重置
    }, "object");
    g_register_class(ctx, "linq::enumerable", lambda(this) {
        this."__doc__" := "可枚举接口";
        this."enumerator" := lambda(this) -> _; // 创建枚举器
    }, "object");
    g_register_class(ctx, "list::array::enumerator", lambda(this) {
        this."__doc__" := "数组枚举器";
        this."__array__" := _; // 包装的数组
        this."__index__" := -1; // 访问的索引
        this."current" := lambda(this) -> this."__array__"."get"(this."__index__");
        this."index" := lambda(this) -> this."__index__";
        this."next" := lambda(this) {
            this."__index__"++;
            return this."__index__" >= 0 && this."__index__" < this."__array__"."size"();
        };
        this."reset" := lambda(this) -> this."__index__" := -1;
    }, "linq::enumerator");
    g_register_class(ctx, "list::array", lambda(this) {
        this."__doc__" := "数组";
        this."array" := g_new_array;
        this."add" := lambda(this, obj) -> g_array_add(this."array", obj);
        this."contains" := lambda(this, obj) -> g_array_contains(this."array", obj);
        this."append" := lambda(this, obj) -> g_array_append(this."array", obj);
        this."insert" := lambda(this, i, obj) -> g_array_insert(this."array", i, obj);
        this."set" := lambda(this, i, obj) -> g_array_set(this."array", i, obj);
        this."pop" := lambda(this) -> g_array_pop(this."array");
        this."clear" := lambda(this) -> g_array_clear(this."array");
        this."reverse" := lambda(this) -> g_array_reverse(this."array");
        this."get" := lambda(this, obj) -> g_array_get(this."array", obj);
        this."get_ex" := lambda(this, obj) -> g_array_get_ex(this."array", obj);
        this."size" := lambda(this) -> g_array_size(this."array");
        this."remove" := lambda(this, i) -> g_array_remove(this."array", i);
        this."delete" := lambda(this, obj) -> g_array_delete(this."array", obj);
        this."empty" := lambda(this) -> g_array_empty(this."array");
        this."fill" := lambda(this, obj) -> g_array_fill(this."array", obj);
        this."enumerator" := lambda(this) ->
            g_new_class(this."__ctx__", "list::array::enumerator", [["__array__", this]], []);
        this."to_string" := lambda(this) -> to_string(this."array");
    }, "linq::enumerable");
    g_register_class(ctx, "list::map", lambda(this) {
        this."map" := g_new_map;
        this."keys" := lambda(this) -> g_map_keys(this."map");
        this."values" := lambda(this) -> g_map_values(this."map");
        this."put" := lambda(this, k, v) -> g_map_put(this."map", k, v);
        this."contains" := lambda(this, obj) -> g_map_contains(this."map", obj);
        this."get" := lambda(this, obj) -> g_map_get(this."map", obj);
        this."size" := lambda(this) -> g_map_size(this."map");
        this."remove" := lambda(this, obj) -> g_map_remove(this."map", obj);
        this."clear" := lambda(this) -> g_map_clear(this."map");
        this."empty" := lambda(this) -> g_map_empty(this."map");
    }, "object");
};

var import_string_class = func ~(ctx) {
    g_register_class(ctx, "string", lambda(this) {
        this."str" := "";
        this."replace" := lambda(this, from, to) -> g_string_replace(this."str", from, to);
        this."split" := lambda(this, delim) -> g_string_split(this."str", delim);
        this."splitn" := lambda(this, delim, n) -> g_string_splitn(this."str", delim, n);
        this."trim" := lambda(this) -> g_string_trim(this."str");
        this."length" := lambda(this) -> g_string_length(this."str");
        this."size" := lambda(this) -> g_string_length(this."str");
        this."get" := lambda(this, i) -> g_string_get(this."str", i);
        this."empty" := lambda(this) -> g_string_empty(this."str");
        this."regex" := lambda(this, regex) -> g_string_regex(this."str", regex);
        this."atoi" := lambda(this) -> g_string_atoi(this."str");
        this."atoi_s" := lambda(this) -> g_string_atoi_s(this."str");
        this."to_upper" := lambda(this) -> g_string_toupper(this."str");
        this."to_lower" := lambda(this) -> g_string_tolower(this."str");
        this."to_number" := lambda(this) -> g_string_to_number(this."str");
        this."start_with" := lambda(this, obj) -> g_string_start_with(this."str", obj);
        this."substr" := lambda(this, start, end) -> g_string_substr(this."str", start, end);
        this."left" := lambda(this, n) -> g_string_left(this."str", n);
        this."right" := lambda(this, n) -> g_string_right(this."str", n);
    }, "object");
};

var import_stream_class = func ~(ctx) {
    g_register_class(ctx, "stream::input", lambda(this) {
        this."handle" := g_null;
        this."read" := lambda(this) -> g_read_pipe_once(this."handle");
        this."destroy" := lambda(this) -> g_destroy_pipe(this."handle");
    }, "object");
    g_register_class(ctx, "stream::output", lambda(this) {
        this."handle" := g_null;
        this."write" := lambda(this, ch) -> g_write_pipe(this."handle", ch);
        this."writeln" := lambda(this, ch) -> g_write_pipe_n(this."handle", ch);
        this."destroy" := lambda(this) -> g_destroy_pipe(this."handle");
    }, "object");
};

var import_process_class = func ~(ctx) {
    g_register_class(ctx, "system::process", lambda(this) {
        this."handle" := g_nullptr;
        this."entry" := g_null;
        this."start" := lambda(this, entry) {
            if (g_is_valid_handle(this."handle")) { return; }
            this."entry" := entry;
            this."handle" := g_create_user_process(entry);
        };
        this."start_args" := lambda(this, entry, args) {
            if (g_is_valid_handle(this."handle")) { return; }
            this."entry" := entry;
            this."handle" := g_create_user_process_args(entry, args);
        };
        this."stop" := lambda(this) {
            if (!g_is_valid_handle(this."handle")) { return; }
            g_join_process(this."handle");
        };
    }, "object");
};

var g_import_std_base = func ~(ctx) {
    // Base class: object
    g_register_class(ctx, "object", lambda(this) {
        this."type" := "object";
        this."to_string" := lambda(this) -> this."__type__";
    }, g_null);
    // List
    import_list_class(ctx);
    // String
    import_string_class(ctx);
    // Process
    import_process_class(ctx);
    // Stream
    import_stream_class(ctx);
};
export "g_import_std_base";