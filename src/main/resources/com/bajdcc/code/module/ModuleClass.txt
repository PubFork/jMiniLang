import "sys.base";
import "sys.list";
import "sys.proc";

var g_create_context = func ~() -> g_class_context;
export "g_create_context";

var g_create_property = func ~(class, name, property) {
    g_map_put(class, name, property);
};
export "g_create_property";
var g_get_property = func ~(class, name) {
    if (g_is_null(class)) {
        throw "g_get_property: name = " + name;
    }
    if (g_map_contains(class, name)) {
        return class[name];
    }
    var base = class["__base__"];
    if (g_is_null(base)) {
        return;
    }
    return g_get_property(base, name);
};
export "g_get_property";
var g_has_property = func ~(class, name) {
    if (g_map_contains(class, name)) {
        return true;
    }
    var base = class["__base__"];
    if (g_is_null(base)) {
        return false;
    }
    return g_has_property(base, name);
};
export "g_has_property";
var g_set_property_rec = func ~(class, name, property) {
    if (g_map_contains(class, name)) {
        g_map_put(class, name, property);
        return true;
    }
    var base = class["__base__"];
    if (g_is_null(base)) {
        return false;
    }
    if (!g_set_property_rec(base, name, property)) {
        g_map_put(class, name, property);
    }
    return true;
};
export "g_set_property_rec";
var g_set_property = func ~(class, name, property) {
    if (g_get_type_ordinal(class) != 10) {
        throw "Not class type: " + g_to_string(class) + "." + name;
    }
    if (g_map_contains(class, name)) {
        g_map_put(class, name, property);
        return true;
    }
    var base = class["__base__"];
    if (g_is_null(base)) {
        g_map_put(class, name, property);
        return false;
    }
    if (!g_set_property_rec(base, name, property)) {
        g_map_put(class, name, property);
    }
    return true;
};
export "g_set_property";
var g_set_property_unary = func ~(class, name, property) {
    if (g_get_type_ordinal(class) != 10) {
        throw "Not class type: " + g_to_string(class) + "." + name;
    }
    if (g_map_contains(class, name)) {
        g_map_put(class, name, property);
        return property;
    }
    var base = class["__base__"];
    if (g_is_null(base)) {
        g_map_put(class, name, property);
        return property;
    }
    if (!g_set_property_rec(base, name, property)) {
        g_map_put(class, name, property);
    }
    return property;
};
export "g_set_property_unary";

var g_create_method = func ~(class, name, method) {
    g_map_put(class, name, method);
};
export "g_create_method";
var g_invoke_method = func ~(class, name) {
    var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next01 = func ~(__ret, __before, __cnt, __i, __next) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next);
            return next(class."__type__", name, class, _next);
        };
        var ret = _next01(_ret, _before, _cnt, _i, _next01);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next02 = func ~(__ret, __after, __cnt, __i, _r, __next) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next);
            return next(class."__type__", name, class, _r, _next);
        };
        var ret = _next02(_ret, _after, _cnt, _i, r, _next02);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method";
var g_invoke_method_1 = func ~(class, name, arg1) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next11 = func ~(__ret, __before, __cnt, __i, __next, arg1) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1);
            return next(class."__type__", name, class, _next, arg1);
        };
        var ret = _next11(_ret, _before, _cnt, _i, _next11, arg1);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next12 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1);
            return next(class."__type__", name, class, _r, _next, arg1);
        };
        var ret = _next12(_ret, _after, _cnt, _i, r, _next12, arg1);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_1";
var g_invoke_method_2 = func ~(class, name, arg1, arg2) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next21 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2);
            return next(class."__type__", name, class, _next, arg1, arg2);
        };
        var ret = _next21(_ret, _before, _cnt, _i, _next21, arg1, arg2);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next22 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2);
            return next(class."__type__", name, class, _r, _next, arg1, arg2);
        };
        var ret = _next22(_ret, _after, _cnt, _i, r, _next22, arg1, arg2);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_2";
var g_invoke_method_3 = func ~(class, name, arg1, arg2, arg3) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next31 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3);
            return next(class."__type__", name, class, _next, arg1, arg2, arg3);
        };
        var ret = _next31(_ret, _before, _cnt, _i, _next31, arg1, arg2, arg3);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2, arg3);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next32 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3);
            return next(class."__type__", name, class, _r, _next, arg1, arg2, arg3);
        };
        var ret = _next32(_ret, _after, _cnt, _i, r, _next32, arg1, arg2, arg3);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_3";
var g_invoke_method_4 = func ~(class, name, arg1, arg2, arg3, arg4) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next41 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4);
            return next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4);
        };
        var ret = _next41(_ret, _before, _cnt, _i, _next41, arg1, arg2, arg3, arg4);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2, arg3, arg4);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next42 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4);
            return next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4);
        };
        var ret = _next42(_ret, _after, _cnt, _i, r, _next42, arg1, arg2, arg3, arg4);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_4";
var g_invoke_method_5 = func ~(class, name, arg1, arg2, arg3, arg4, arg5) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next51 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5);
            return next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5);
        };
        var ret = _next51(_ret, _before, _cnt, _i, _next51, arg1, arg2, arg3, arg4, arg5);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2, arg3, arg4, arg5);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next52 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5);
            return next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5);
        };
        var ret = _next52(_ret, _after, _cnt, _i, r, _next52, arg1, arg2, arg3, arg4, arg5);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_5";
var g_invoke_method_6 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next61 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6);
            return next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6);
        };
        var ret = _next61(_ret, _before, _cnt, _i, _next61, arg1, arg2, arg3, arg4, arg5, arg6);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2, arg3, arg4, arg5, arg6);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next62 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6);
            return next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6);
        };
        var ret = _next62(_ret, _after, _cnt, _i, r, _next62, arg1, arg2, arg3, arg4, arg5, arg6);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_6";
var g_invoke_method_7 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next71 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            return next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        };
        var ret = _next71(_ret, _before, _cnt, _i, _next71, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next72 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            return next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        };
        var ret = _next72(_ret, _after, _cnt, _i, r, _next72, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_7";
var g_invoke_method_8 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next81 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        };
        var ret = _next81(_ret, _before, _cnt, _i, _next81, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next82 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        };
        var ret = _next82(_ret, _after, _cnt, _i, r, _next82, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_8";
var g_invoke_method_9 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
var method = class.name;
    if (g_is_null(method)) { return; }
    var flag = g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = g_array_size(_before);
        var _i = 0;
        var _next91 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __before[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            return next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        };
        var ret = _next91(_ret, _before, _cnt, _i, _next91, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = method(class, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = g_array_size(_after);
        var _i = 0;
        var _next92 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
            if (__i >= __cnt) {
                g_array_add(__ret, true);
                return;
            }
            var next = __after[__i];
            __i++;
            var _next =  func ~() -> __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            return next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        };
        var ret = _next92(_ret, _after, _cnt, _i, r, _next92, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        if (g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_9";

var g_register_class = func ~(ctx, name, init, base) {
    var class = {};
    g_create_property(class, "name", name);
    if (!g_is_null(base) && g_map_contains(ctx, base)) {
        g_create_property(class, "base", base);
    }
    g_create_method(class, "init", init);
    g_map_put(ctx, name, class);
};
export "g_register_class";
var g_class = func ~(name, base, init) {
    var class = {};
    g_create_property(class, "name", name);
    if (!g_is_null(base) && g_map_contains(g_class_context, base)) {
        g_create_property(class, "base", base);
    }
    g_create_method(class, "init", init);
    g_map_put(g_class_context, name, class);
};
export "g_class";

var g_create_class = func ~(ctx, name) {
    var prototype = ctx[name];
    if (g_is_null(prototype)) {
        throw "Undefined class: " + name;
    }
    var class = {};
    g_create_property(class, "__type__", name);
    if (g_map_contains(prototype, "base")) {
        g_map_put(class, "__base__", g_create_class(ctx, prototype["base"]));
    }
    var init = prototype["init"];
    if (!g_is_null(init)) {
        init(class);
    }
    return class;
};
export "g_create_class";

// ---- HOOK ----

var g_hook_add_before = func ~(class, name, f) {
    var old = class.name;
    if (g_is_null(old)) {
        return false;
    }
    var flag = g_get_flag(old);
    if ((flag & 1) > 0) {
        var _before = class.(name + "__before");
        g_array_add(_before, f);
    } else {
        var _before = [];
        g_array_add(_before, f);
        set class::(name + "__before") = _before;
        g_set_flag(old, flag | 1);
    }
    return true;
};
export "g_hook_add_before";
var g_hook_insert_before = func ~(class, name, f) {
    var old = class.name;
    if (g_is_null(old)) {
        return false;
    }
    var flag = g_get_flag(old);
    if ((flag & 1) > 0) {
        var _before = class.(name + "__before");
        g_array_insert(_before, 0, f);
    } else {
        var _before = [];
        g_array_add(_before, f);
        set class::(name + "__before") = _before;
        g_set_flag(old, flag | 1);
    }
    return true;
};
export "g_hook_insert_before";
var g_hook_remove_before = func ~(class, name, f) {
    var old = class.name;
    if (g_is_null(old)) {
        return false;
    }
    var flag = g_get_flag(old);
    if ((flag & 1) > 0) {
        var _before = class.(name + "__before");
        var ret = g_array_delete(_before, f);
        if (g_array_empty(_before)) {
            set class::(name + "__before") = g_null;
            g_set_flag(old, flag - 1);
        }
        return ret;
    }
    return false;
};
export "g_hook_remove_before";
var g_hook_add_after = func ~(class, name, f) {
    var old = class.name;
    if (g_is_null(old)) {
        return false;
    }
    var flag = g_get_flag(old);
    if ((flag & 2) > 0) {
        var _after = class.(name + "__after");
        g_array_add(_after, f);
    } else {
        var _after = [];
        g_array_add(_after, f);
        set class::(name + "__after") = _after;
        g_set_flag(old, flag | 2);
    }
    return true;
};
export "g_hook_add_after";
var g_hook_insert_after = func ~(class, name, f) {
    var old = class.name;
    if (g_is_null(old)) {
        return false;
    }
    var flag = g_get_flag(old);
    if ((flag & 2) > 0) {
        var _after = class.(name + "__after");
        g_array_insert(_after, 0, f);
    } else {
        var _after = [];
        g_array_add(_after, f);
        set class::(name + "__after") = _after;
        g_set_flag(old, flag | 2);
    }
    return true;
};
export "g_hook_insert_after";
var g_hook_remove_after = func ~(class, name, f) {
    var old = class.name;
    if (g_is_null(old)) {
        return false;
    }
    var flag = g_get_flag(old);
    if ((flag & 2) > 0) {
        var _after = class.(name + "__after");
        var ret = g_array_delete(_after, f);
        if (g_array_empty(_after)) {
            set class::(name + "__after") = g_null;
            g_set_flag(old, flag - 2);
        }
        return ret;
    }
    return false;
};
export "g_hook_remove_after";

var g_invoke_apply = func ~(class, fun, args) {
    var size = g_array_size(args);
    if (size > 9) {
        g_panic("g_call_apply: TOO MANY ARGUMENTS");
    }
    var apply_callbacks = g_query_share("MODULE_CLASS#APPLY_FUNCS");
    if (g_is_null(apply_callbacks)) {
        apply_callbacks := [
            lambda(c, f, a) -> invoke c::f::(),
            lambda(c, f, a) -> invoke c::f::(a[0]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1], a[2]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1], a[2], a[3]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1], a[2], a[3], a[4]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1], a[2], a[3], a[4], a[5]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1], a[2], a[3], a[4], a[5], a[6]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]),
            lambda(c, f, a) -> invoke c::f::(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])
        ];
        g_start_share("MODULE_CLASS#APPLY_FUNCS", apply_callbacks);
    }
    var fn = apply_callbacks[size];
    return fn(class, fun, args);
};
export "g_invoke_apply";
var g_new_class = func ~(name) {
    return g_create_class(g_class_context, name);
};
export "g_new_class";
var g_new_class_ctx = func ~(ctx, name, data, method) {
    var class = g_create_class(ctx, name);
    foreach (var d : g_range_array(data)) {
        set class::d[0] = d[1];
    }
    var m_;
    foreach (var m : g_range_array(method)) {
        m_ := m[0];
        g_array_remove(m, 0);
        g_invoke_apply(class, m_, m);
    }
    return class;
};
export "g_new_class_ctx";
var g_new_class_init = func ~(name, data, method) {
    var class = g_new_class(name);
    foreach (var d : g_range_array(data)) {
        set class::d[0] = d[1];
    }
    var m_;
    foreach (var m : g_range_array(method)) {
        m_ := m[0];
        g_array_remove(m, 0);
        g_invoke_apply(class, m_, m);
    }
    return class;
};
export "g_new_class_init";