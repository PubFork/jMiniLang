// -----------------------------------------------------------------------------------------
// @ Class Reference: Go library
// -----------------------------------------------------------------------------------------

import "user.base";
var _ = g_null;

// -----------------------------------------------------------------------------------------
// CLASS [clib::c::token]
// 单词
// ---- CODE BEGIN ----

var import_token = func ~() {
    g_class("clib::c::token", "object", lambda(this) {
        this."token" := _;
        this."ordinal" := _;
        this."value" := _;
        this."start" := _;
        this."end" := _;
        this."line" := _;
        this."init_id" := lambda(this, id) {
            this."ordinal" := this."kws"."get"(id);
            if (g_not_null(this."ordinal")) {
                this."token" := this."ordinal";
                this."ordinal" := this."dict"."get"(this."token");
            } else {
                this."set_token"("#ID");
                this."value" := id;
            }
        };
        this."set_token" := lambda(this, token) {
            this."token" := token;
            this."ordinal" := this."dict"."get"(token);
        };
        this."set_value" := lambda(this, value) {
            this."value" := value;
        };
        this."set_op" := lambda(this, op) {
            this."set_token"(this."ops"."get"(op));
        };
        this."equals" := lambda(this, token) -> this."token" == token;
        this."ORDINAL" := lambda(this, token) -> this."dict"."get"(token)[0];
        this."DESC" := lambda(this, token) -> this."dict"."get"(token)[1];
        this."PRED" := lambda(this, token) -> this."dict"."get"(token)[2];
        this."is_literal" := lambda(this) ->
            this."ORDINAL"("Literal-Begin") < this."ordinal"[0] &&
                this."ORDINAL"("Literal-End") > this."ordinal"[0];
        this."is_operator" := lambda(this) ->
            this."ORDINAL"("Operator-Begin") < this."ordinal"[0] &&
                this."ORDINAL"("Operator-End") > this."ordinal"[0];
        this."is_keyword" := lambda(this) ->
            this."ORDINAL"("Keyword-Begin") < this."ordinal"[0] &&
                this."ORDINAL"("Keyword-End") > this."ordinal"[0];
        this."eof" := lambda(this) -> this."token" == "EOF";
        this."to_string" := lambda(this) {
            var s = "[" + this."line" + ":" + this."start" + "-" + this."end"+ "] ";
            s += this."token" + ", " + this."ordinal"[1];
            if (this."is_literal"() || this."token" == "ILLEGAL" || this."token" == "COMMENT") {
                s += ", " + this."value";
            }
            return s;
        };
        if (g_map_contains(g_class_context[this."type"], "dict")) {
            this."dict" := g_class_context[this."type"]["dict"];
            this."ops" := g_class_context[this."type"]["ops"];
            this."kws" := g_class_context[this."type"]["kws"];
            return;
        }
        /* PRED Refer: https://github.com/bajdcc/CParser/blob/master/CParser/types.cpp */
        var data = [
            // ENUM              DESC              PRED
            [ "ILLEGAL"        , "Illegal token" , 9999 ],
            [ "EOF"            , "End of file"   , 9999 ],
            [ "COMMENT"        , "Comment"       , 9999 ],
            [ "Literal-Begin"  , ""              , 9999 ],
            [ "#ID"            , "Identifier"    , 9999 ], // foo
            [ "#INT"           , "Integer"       , 9999 ], // 12345
            [ "#FLOAT"         , "Float"         , 9999 ], // 123.45
            [ "#CHAR"          , "Character"     , 9999 ], // 'a'
            [ "#STRING"        , "String"        , 9999 ], // "abc"
            [ "Literal-End"    , ""              , 9999 ],
            [ "Operator-Begin" , ""              , 9999 ],
            [ "ADD"            , "+"             , 0401 ],
            [ "SUB"            , "-"             , 0402 ],
            [ "MUL"            , "*"             , 0302 ],
            [ "DIV"            , "/"             , 0301 ],
            [ "MOD"            , "%"             , 0303 ],
            [ "ESC"            , "\\"            , 9000 ],
            [ "ADDA"           , "+="            , 1405 ],
            [ "SUBA"           , "-="            , 1406 ],
            [ "MULA"           , "*="            , 1403 ],
            [ "DIVA"           , "/="            , 1402 ],
            [ "MODA"           , "%="            , 1404 ],
            [ "AND"            , "&"             , 0801 ],
            [ "OR"             , "|"             , 1001 ],
            [ "XOR"            , "^"             , 0901 ],
            [ "INV"            , "~"             , 0208 ],
            [ "SHL"            , "<<"            , 0501 ],
            [ "SHR"            , ">>"            , 0502 ],
            [ "ANDA"           , "&="            , 1409 ],
            [ "ORA"            , "|="            , 1411 ],
            [ "XORA"           , "^="            , 1410 ],
            [ "SHLA"           , "<<="           , 1407 ],
            [ "SHRA"           , ">>="           , 1408 ],
            [ "LAND"           , "&&"            , 1101 ],
            [ "LOR"            , "||"            , 1201 ],
            [ "INC"            , "++"            , 0203 ],
            [ "DEC"            , "--"            , 0204 ],
            [ "EQ"             , "=="            , 0701 ],
            [ "LT"             , "<"             , 0603 ],
            [ "GT"             , ">"             , 0601 ],
            [ "ASSIGN"         , "="             , 1401 ],
            [ "NOT"            , "!"             , 0207 ],
            [ "NE"             , "!="            , 0702 ],
            [ "LE"             , "<="            , 0604 ],
            [ "GE"             , ">="            , 0602 ],
            [ "LPA"            , "("             , 0102 ],
            [ "LSQ"            , "["             , 0101 ],
            [ "LBR"            , "{"             , 9000 ],
            [ "RPA"            , ")"             , 0102 ],
            [ "RSQ"            , "]"             , 0101 ],
            [ "RBR"            , "}"             , 9000 ],
            [ "DOT"            , "."             , 0103 ],
            [ "COMMA"          , ","             , 1501 ],
            [ "QUERY"          , "?"             , 1301 ],
            [ "SEMI"           , ";"             , 9000 ],
            [ "COLON"          , ":"             , 1302 ],
            [ "Operator-End"   , ""              , 9999 ],
            [ "Keyword-Begin"  , ""              , 9999 ],
            [ "AUTO"           , "auto"          , 9999 ],
            [ "BOOL"           , "bool"          , 9999 ],
            [ "BREAK"          , "break"         , 9999 ],
            [ "CASE"           , "case"          , 9999 ],
            [ "CHAR"           , "char"          , 9999 ],
            [ "CONST"          , "const"         , 9999 ],
            [ "CONTINUE"       , "continue"      , 9999 ],
            [ "DEFAULT"        , "default"       , 9999 ],
            [ "DO"             , "do"            , 9999 ],
            [ "DOUBLE"         , "double"        , 9999 ],
            [ "ELSE"           , "else"          , 9999 ],
            [ "ENUM"           , "enum"          , 9999 ],
            [ "EXTERN"         , "extern"        , 9999 ],
            [ "FALSE"          , "false"         , 9999 ],
            [ "FLOAT"          , "float"         , 9999 ],
            [ "FOR"            , "for"           , 9999 ],
            [ "GOTO"           , "goto"          , 9999 ],
            [ "IF"             , "if"            , 9999 ],
            [ "INT"            , "int"           , 9999 ],
            [ "LONG"           , "long"          , 9999 ],
            [ "REGISTER"       , "register"      , 9999 ],
            [ "RETURN"         , "return"        , 9999 ],
            [ "SHORT"          , "short"         , 9999 ],
            [ "SIGNED"         , "signed"        , 9999 ],
            [ "SIZEOF"         , "sizeof"        , 9999 ],
            [ "STATIC"         , "static"        , 9999 ],
            [ "STRUCT"         , "struct"        , 9999 ],
            [ "SWITCH"         , "switch"        , 9999 ],
            [ "TRUE"           , "true"          , 9999 ],
            [ "TYPEDEF"        , "typedef"       , 9999 ],
            [ "UNION"          , "union"         , 9999 ],
            [ "UNSIGNED"       , "unsigned"      , 9999 ],
            [ "VOID"           , "void"          , 9999 ],
            [ "VOLATILE"       , "volatile"      , 9999 ],
            [ "WHILE"          , "while"         , 9999 ],
            [ "Keyword-End"    , ""              , 9999 ]
        ];
        var d2 = g_from({});
        var ops = g_from({});
        var kws = g_from({});
        var idx = 0;
        foreach (var d : g_range_array(data)) {
            d2."put"(d[0], [idx++, d[1], d[2]]);
        }
        g_map_put(g_class_context[this."type"], "dict", d2);
        g_map_put(g_class_context[this."type"], "ops", ops);
        g_map_put(g_class_context[this."type"], "kws", kws);
        this."dict" := d2;
        this."ops" := ops;
        this."kws" := kws;
        var opa = this."ORDINAL"("Operator-Begin");
        var opb = this."ORDINAL"("Operator-End");
        foreach (var op : g_range(opa, opb - 2)) {
            ops."put"(data[op][1], data[op][0]);
        }
        var kwa = this."ORDINAL"("Keyword-Begin");
        var kwb = this."ORDINAL"("Keyword-End");
        foreach (var kw : g_range(kwa, kwb - 2)) {
            kws."put"(data[kw][1], data[kw][0]);
        }
    });
};

// ---- CODE END ----
// -----------------------------------------------------------------------------------------
// CLASS [clib::c::scanner]
// 单词扫描器
// ---- CODE BEGIN ----

var import_scanner = func ~() {
    g_class("clib::c::scanner", "object", lambda(this) {
        this."ch" := '\0'; // 当前字符
        this."offset" := 0; // 当前指针
        this."rdOffset" := 0; // 预读指针
        this."lineOffset" := 0; // 行偏移
        this."lines" := g_from([]); // 行偏移数组
        this."errors" := g_from([]); // 错误
        this."str" := _; // 源码
        this."available" := true; // 是否可用
        this."init" := lambda(this, str) {
            this."str" := g_from(str);
            this."next"();
        };
        this."next" := lambda(this) {
            if (this."rdOffset" < this."str"."length"()) { // 没到末尾
                this."offset" := this."rdOffset";
                if (this."ch" == '\n') { // 新行
                    this."lineOffset" := this."offset";
                    this."lines"."add"(this."offset");
                }
                this."ch" := this."str"."get"(this."rdOffset");
                this."rdOffset"++;
                return true; // 继续
            } else { // 读到末尾
                this."available" := false;
                this."offset" := this."str"."length"();
                if (this."ch" == '\n') {
                    this."lineOffset" := this."offset";
                    this."lines"."add"(this."offset");
                }
                this."ch" := '\0';
                return false; // 中止
            }
        };
        this."err" := lambda(this, line, start, end, msg) {
            this."errors"."add"([line, start, end, msg]);
        };
        this."ERROR" := lambda(this) -> this."errors"."to_string"();
        this."REPORT" := lambda(this) -> // 报告当前位置
            "" + this."lines"."size"() + "," + this."lineOffset" + "," + this."offset" + "," + this."ch";
        // ---------------- Public Method ----------------
        this."is_letter" := lambda(this) -> g_is_letter(this."ch") || this."ch" == '_';
        this."is_digit" := lambda(this) -> g_is_digit(this."ch");
        this."is_letter_or_digit" := lambda(this) -> g_is_letter_or_digit(this."ch") || this."ch" == '_';
        this."is_whitespace" := lambda(this) -> g_is_whitespace(this."ch");
        this."next_id" := lambda(this) {
            var i = this."offset";
            while (this."is_letter_or_digit"()) {
                this."next"();
            }
            return g_new_class("clib::c::token", [["start", i], ["end", this."offset"], ["line", this."lines"."size"()]],
                [["init_id", this."str"."substr"(i, this."offset")]]);
        };
        this."next_digit" := lambda(this, base) {
            while (this."available" && g_char_to_digit(this."ch") < base) {
                this."next"();
            }
        };
        this."next_number" := lambda(this, decimal) {
            var i = this."offset";
            var token = g_new_class("clib::c::token", [], [["set_token", "#INT"]]); // 默认为整型
            token."start" := i;
            token."line" := this."lines"."size"();
            var exponent = func ~() { // 识别指数部分
                if (this."ch" == 'e' || this."ch" == 'E') { // 表示指数
                    token."set_token"("#FLOAT");
                    this."next"();
                    if (this."ch" == '+' || this."ch" == '-') { // 指数正负
                        this."next"();
                    }
                    if (g_char_to_digit(this."ch") < 10) { // 指数数字
                        this."next_digit"(10);
                    } else { // 指数不是整数，报错
                        this."err"(this."lines"."size"(), i, this."offset", "illegal floating-point exponent");
                    }
                }
            };
            var fraction = func ~() { // 识别小数部分
                if (this."ch" == '.') {
                    token."set_token"("#FLOAT"); // 识别为浮点
                    this."next"(); // 跳过小数点
                    this."next_digit"(10); // 识别小数
                }
            };
            var exit = func ~() { // 识别正常数字
                token."set_value"(this."str"."substr"(i, this."offset"));
                token."end" := this."offset";
                return token;
            };
            if (decimal) { // 确定是浮点
                i--;
                token."start" := i;
                token."set_token"("#FLOAT");
                this."next_digit"(10); // 识别数字
                exponent();
                return exit();
            }
            if (this."ch" == '0') { // '0'开头
                i := this."offset";
                this."next"();
                if (this."ch" == 'x' || this."ch" == 'X') { // 0x 0X 十六进制数字
                    this."next"();
                    this."next_digit"(16); // 识别十六进制
                    if (this."offset" - i <= 2) { // 只识别了 0x 0X，报错
                        this."err"(this."lines"."size"(), i, this."offset", "illegal hexadecimal number");
                    }
                } else { // 八进制
                    decimal := false; // 判断为整型
                    this."next_digit"(8);
                    if (this."ch" == '8' || this."ch" == '9') { // 非八进制数字，识别为浮点
                        decimal := true;
                        this."next_digit"(10);
                    }
                    if (this."ch" == '.' || this."ch" == 'e' || this."ch" == 'E') {
                        fraction();
                        exponent();
                        return exit();
                    }
                    if (decimal) { // 非八进制字符，报错
                        this."err"(this."lines"."size"(), i, this."offset", "illegal octal number");
                    }
                }
                return exit();
            }
            this."next_digit"(10); // 识别正常数字
            fraction();
            exponent();
            return exit();
        };
        this."next_comment" := lambda(this) {
            var i = this."offset";
            i--;
            var token = g_new_class("clib::c::token", [], [["set_token", "COMMENT"]]);
            token."start" := i;
            token."line" := this."lines"."size"();
            var exit = func ~() {
                token."set_value"(this."str"."substr"(i, this."offset"));
                token."end" := this."offset";
                return token;
            };
            var star = false;
            if (this."ch" == '/') { // Comment -> '//'
                this."next"();
                while (this."ch" != '\n' && this."ch" > '\0') {
                    this."next"();
                }
                return exit();
            } else { // Comment -> '/*'
                var star;
                this."next"();
                while (this."ch" > '\0') {
                    star := this."ch" == '*';
                    this."next"();
                    if (star && this."ch" == '/') {
                        this."next"();
                        return exit();
                    }
                }
            }
            this."err"(this."lines"."size"(), i, this."offset", "comment not terminated");
            return exit();
        };
        this."next_string" := lambda(this) {
            var i = this."offset";
            i--;
            var token = g_new_class("clib::c::token", [], [["set_token", "#STRING"]]);
            token."start" := i;
            token."line" := this."lines"."size"();
            var exit = func ~() {
                token."set_value"(this."str"."substr"(i, this."offset"));
                token."end" := this."offset";
                return token;
            };
            var ch;
            while (true) {
                ch := this."ch";
                if (ch == '\n' || ch == '\0') {
                    this."err"(this."lines"."size"(), i, this."offset", "string literal not terminated");
                    break;
                }
                this."next"();
                if (ch == '"') {
                    break;
                }
                if (ch == '\\') {
                    this."next_escape"('"');
                }
            }
            return exit();
        };
        this."escape_switch" := g_from({
            "a": 1, "b": 1, "f": 1, "n": 1, "r": 1, "t": 1, "v": 1, "\\": 1,
            "0": 2, "1": 2, "2": 2, "3": 2, "4": 2, "5": 2, "6": 2, "7": 2,
            "x": 3, "X": 3, "u": 4, "U": 4
        });
        this."next_escape" := lambda(this, quote) {
            var i = this."offset";
            var data = _; // [n, base, max]
            var ch = this."ch";
            var key = "" + ch;
            var idx = this."escape_switch"."get"(key);
            if (g_not_null(idx)) {
                if (idx == 1 || ch == quote) { // abfnrtv'
                    this."next"();
                    return true;
                } else if (idx == 2) { // 01234567
                    data := [3, 8, 255];
                } else if (idx == 3) { // xX
                    this."next"();
                    data := [2, 16, 255];
                } else if (idx == 4) { // uU
                    this."next"();
                    data := [4, 16, 65535];
                }
                var x = 0; var d;
                var n = data[0];
                var base = data[1];
                var max = data[2];
                for (; n > 0; n--) {
                    d := g_char_to_digit(this."ch");
                    if (d >= base) {
                        this."err"(this."lines"."size"(), i, this."offset", "illegal character in escape sequence: " + this."ch");
                        return false;
                    }
                    x := x * base + d;
                    if (!this."next"()) {
                        this."err"(this."lines"."size"(), i, this."offset", "escape sequence not terminated");
                        return false;
                    }
                }
                if (x > max || 0xD800 <= x && x < 0xE000) {
                    this."err"(this."lines"."size"(), i, this."offset", "escape sequence is invalid Unicode code point");
                    return false;
                }
                return true;
            } else {
                if (this."available") {
                    this."err"(this."lines"."size"(), i, this."offset", "unknown escape sequence");
                } else {
                    this."err"(this."lines"."size"(), i, this."offset", "escape sequence not terminated");
                }
                return false;
            }
        };
        this."next_char" := lambda(this) {
            var i = this."offset";
            i--;
            var token = g_new_class("clib::c::token", [], [["set_token", "#CHAR"]]);
            token."start" := i;
            token."line" := this."lines"."size"();
            var exit = func ~() {
                token."set_value"(this."str"."substr"(i, this."offset"));
                token."end" := this."offset";
                return token;
            };
            var valid = true;
            var n = 0;
            var ch;
            while (true) {
                ch := this."ch";
                if (ch == '\n' || ch == '\0') {
                    if (valid) {
                        valid := false;
                        this."err"(this."lines"."size"(), i, this."offset", "char literal not terminated");
                    }
                    break;
                }
                this."next"();
                if (ch == '\'') {
                    break;
                }
                n++;
                if (ch == '\\') {
                    valid := this."next_escape"('\'');
                }
            }
            if (valid && n != 1) {
                this."err"(this."lines"."size"(), i, this."offset", "illegal char literal");
            }
            return exit();
        };
        this."skip_whitespace" := lambda(this) {
            while (this."is_whitespace"()) {
                this."next"();
            }
        };
        this."op" := lambda(this, i, ch) ->
            g_new_class("clib::c::token", [["start", i],
                ["end", this."offset"], ["line", this."lines"."size"()],
                ["value", this."str"."substr"(i, this."offset")]],
                [["set_op", ch]]);
        this."op1" := lambda(this, op) {
            return lambda(this, i, ch) {
                foreach (var o : g_range_string(op)) {
                    if (this."ch" == o) {
                        this."next"();
                        return this."op"(i, "" + ch + o);
                    }
                }
                return this."op"(i, ch);
            };
        };
        this."scan_switch" := g_from({
            "/": lambda(this, i, ch) {
                if (this."ch" == '/' || this."ch" == '*') { // 注释
                    return this."next_comment"();
                }
                var o = this."op1"("=");
                return o(this, i, ch);
            },
            "\"": lambda(this, i, ch) -> this."next_string"(), // 字符串
            "'": lambda(this, i, ch) -> this."next_char"(), // 字符
            "(": this."op",
            ")": this."op",
            "[": this."op",
            "]": this."op",
            "{": this."op",
            "}": this."op",
            ",": this."op",
            ".": this."op",
            ":": this."op",
            ";": this."op",
            "?": this."op",
            "~": this."op",
            "=": this."op1"("="),
            "+": this."op1"("+="),
            "-": this."op1"("-="),
            "*": this."op1"("="),
            "%": this."op1"("="),
            "!": this."op1"("="),
            "&": this."op1"("&="),
            "|": this."op1"("|="),
            "^": this."op1"("="),
            "<": this."op1"("<="),
            ">": this."op1"(">=")
        });
        this."scan" := lambda(this) {
            if (!this."available") {
                return g_new_class("clib::c::token", [["start", this."offset"],
                ["end", this."offset"], ["line", this."lines"."size"()]],
                [["set_token", "EOF"]]);
            }
            this."skip_whitespace"();
            if (this."is_letter"()) {
                return this."next_id"();
            } else if (this."is_digit"()) {
                return this."next_number"(false);
            } else {
                var i = this."offset";
                var ch = this."ch";
                this."next"();
                var key = "" + ch;
                var _switch = this."scan_switch"."get"(key);
                if (g_not_null(_switch)) {
                    var ret = _switch(this, i, ch);
                    if (g_not_null(ret)) { return ret; }
                }
                return g_new_class("clib::c::token", [["start", i],
                    ["end", this."offset"], ["line", this."lines"."size"()],
                    ["value", this."str"."substr"(i, this."offset")]],
                    [["set_token", "ILLEGAL"]]);
            }
        };
    });
};

// ---- CODE END ----
// -----------------------------------------------------------------------------------------
// CLASS [clib::c::ast]
// 抽象语法树
// ---- CODE BEGIN ----

var import_ast = func ~() {
    g_class("clib::c::ast::factory", "object", lambda(this) {
        this."new" := lambda(this, type, args) -> g_new_class("clib::c::ast::" + type, args, []);
        this."stringify" := lambda(this, obj) -> g_is_null(obj) ? "#NULL" : obj."to_string"();
        this."walk_switch" := {
            "prog": lambda(this, node) {
                var s = "PROG {" + g_endl;
                node."decls"."stream"()."for_each"(lambda(i, n) ->
                    n."stream"()."for_each"(lambda(i_, n_) ->
                        s += this."walk"(n_) + g_endl));
                s += "}";
                return s;
            },
            "var": lambda(this, node) {
                var s = "VAR { ";
                s += this."stringify"(node."type");
                s += ", " + this."stringify"(node."id");
                if (g_not_null(node."size")) {
                    s += ", " + this."stringify"(node."size");
                }
                s += " }";
                return s;
            }
        };
        this."walk" := lambda(this, node) {
            var f = this."walk_switch"[node."get_name"()];
            return f(this, node);
        };
    });
    g_class("clib::c::ast::base", "object", lambda(this) {
        this."to_string" := lambda(this) -> "AST= " + this."__type__";
        this."get_name" := lambda(this) -> g_string_right(this."__type__", 14);
    });
    g_class("clib::c::ast::prog", "clib::c::ast::base", lambda(this) {
        this."decls" := _;
    });
    g_class("clib::c::ast::var", "clib::c::ast::base", lambda(this) {
        this."type" := _;
        this."id" := _;
        this."size" := _;
    });
};

// ---- CODE END ----
// -----------------------------------------------------------------------------------------
// CLASS [clib::c::parser]
// 语法解析器
// ---- CODE BEGIN ----

var import_parser = func ~() {
    g_class("clib::c::parser", "object", lambda(this) {
        this."token" := _; // 当前单词
        this."scanner" := _; // 扫描器
        this."errors" := g_from([]); // 错误
        this."err" := lambda(this, token, msg) {
            this."errors"."add"([token, msg]);
        };
        this."eof" := lambda(this) -> this."token"."eof"();
        this."ERROR" := lambda(this) -> this."errors"."to_string"();
        this."init" := lambda(this, str) {
            this."scanner" := g_new_class("clib::c::scanner", [], [["init", str]]);
        };
        // ---------------- Main Data ----------------
        this."factory" := g_new_class("clib::c::ast::factory", [], []); // AST工厂
        this."decls" := g_from([]); // 函数声明
        this."scopes" := g_from([]); // 块环境
        this."ast" := _; // 抽象语法树
        // ---------------- Public Method ----------------
        this."expect" := lambda(this, msg) {
            this."err"(this."token", "expected " + msg + g_endl);
        };
        this."expect_token" := lambda(this, token) {
            if (this."token"."equals"(token)) {
                this."next"();
            } else {
                this."expect"(token);
            }
        };
        this."consume_until" := lambda(this, skip) {
            if (this."eof"()) { return; }
            while (!this."of"(skip) && this."next"()) {}
        };
        this."assert" := lambda(this, token) {
            if (!this."token"."equals"(token)) {
                this."expect"(token);
                this."consume_until"(["SEMI", "RBR"]);
                return false;
            }
            return true;
        };
        this."assert_type" := lambda(this) {
            if (!this."of"(["INT", "FLOAT", "CHAR"])) {
                this."expect"("type");
                this."consume_until"(["SEMI", "RBR"]);
                return false;
            }
            return true;
        };
        this."skip" := lambda(this, tokens) {
            this."consume_until"(tokens);
        };
        this."is" := lambda(this, token) -> this."token"."equals"(token);
        this."of" := lambda(this, tokens) {
            foreach (var token : g_range_array(tokens)) {
                if (this."token"."equals"(token)) {
                    return true;
                }
            }
            return false;
        };
        this."enter_block" := lambda(this) -> this."scopes"."add"([]);
        this."leave_block" := lambda(this) -> this."scopes"."pop"();
        this."this_block" := lambda(this) -> this."scopes"."last"();
        this."next" := lambda(this) ->
            !(this."token" := this."scanner"."scan"())."eof"();
        this."advance" := lambda(this) {
            var token = this."token";
            this."next"();
            return token;
        };
        this."add" := lambda(this, src, obj) {
            if (g_not_null(obj)) {
                src."add"(obj);
            }
        };
        this."add_ast" := lambda(this, src, type, args) {
            src."add"(this."factory"."new"(type, args));
        };
        this."ast" := lambda(this, type, args) -> this."factory"."new"(type, args);
        this."parse" := lambda(this) {
            this."ast" := this."#prog"();
            return this."factory"."walk"(this."ast");
        };
        // LL Parser Refer: https://github.com/bajdcc/C-Compiler/blob/master/MainLogic/Grammar.cpp
        this."#prog" := lambda(this) { // 程序
            var decls = this."#decls"();
            return this."factory"."new"("prog", [["decls", decls]]);
        };
        this."#decls" := lambda(this) { // 声明列表
            var token;
            var decls = g_from([]);
            while (this."next"()) {
                if (!this."assert_type"()) { continue; }
                this."add"(decls, this."#decl"());
            }
            return decls;
        };
        this."#decl" := lambda(this) { // 声明
            var type = this."advance"();
            if (!this."assert"("#ID")) {
                return g_from([this."ast"("var", [["type", type], ["id", _]])]);
            }
            var id = this."advance"();
            if (this."is"("LPA")) {
                return this."#decl!fun"(type, id);
            } else if (this."of"(["SEMI", "COMMA", "LSQ"])) {
                return this."#decl!var"(type, id, g_from([]));
            }
            this."skip"(["SEMI", "RBR"]);
        };
        this."#decl!fun" := lambda(this, type, id) { // 函数声明

        };
        this."#decl!var~rec" := lambda(this, type, vars) { // 变量声明
            if (this."is"("#ID")) {
                var id = this."advance"();
                return this."#decl!var"(type, id, vars);
            } else if (this."is"("SEMI")) {
                return vars;
            }
            this."skip"(["SEMI", "RBR"]);
            return vars;
        };
        this."#decl!var" := lambda(this, type, id, vars) { // 变量声明
            if (this."is"("COMMA")) {
                this."add_ast"(vars, "var", [["type", type], ["id", id]]);
                this."next"();
                return this."#decl!var~rec"(type, vars);
            } else if (this."is"("LSQ")) {
                this."next"();
                var idx = this."token";
                if (!this."assert"("#INT")) {
                    this."add_ast"(vars, "var", [["type", type], ["id", id]]);
                    return vars;
                }
                this."next"();
                if (this."assert"("RSQ")) {
                    this."add_ast"(vars, "var", [["type", type], ["id", id], ["size", idx]]);
                    return this."#decl!var~rec"(type, vars);
                }
            }
            this."add_ast"(vars, "var", [["type", type], ["id", id]]);
            return vars;
        };
    });
};

// ---- CODE END ----
// -----------------------------------------------------------------------------------------

var import_c_parser_library = func ~() {
    if (g_map_contains(g_class_context, "clib::c::parser")) {
        return;
    }
    // Token
    import_token();
    // Scanner
    import_scanner();
    // AST
    import_ast();
    // Parser
    import_parser();
};

import_c_parser_library(); // import cparser library!