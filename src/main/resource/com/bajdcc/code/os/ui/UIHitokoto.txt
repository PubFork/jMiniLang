import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.remote";

g_set_process_desc("hitokoto ui");
g_set_process_priority(81);

var uid = 2;
var ui = g_array_get(g_query_share("UI#NAMELIST"), uid);
var ui_name = "UI#" + ui;
var switch_name = "UI_SWITCH#" + ui;
var signal_name = "UI_SIGNAL#" + ui;

g_printn("Running...");

var first = false;
var init = func ~() {
    g_task_get_fast_arg("ui", "path", "\uffeeM 100 200\uffee\uffeel 500 0\uffee\uffeel 0 150\uffee\uffeel -500 0\uffee\uffeel 0 -150\uffee");
};
var destroy = func ~() {
    g_task_get_fast_arg("ui", "path", "\uffeeM 100 200\uffee\uffeeR 601 351\uffee");
};

var draw = func ~() {
    if (!first) {
        init();
        first := true;
    }
    var obj = g_task_get_fast_arg("net", "get_json", "http://api.hitokoto.cn/?c=a&encode=json");
    if (g_is_null(obj)) { g_task_sleep(10); return; }
    var text = " —— " + obj["from"] + " —— \n" + obj["hitokoto"];
    //var text = "test string for debug";
    g_task_get_fast_arg("ui", "path", "\uffeeM 101 201\uffee\uffeeR 599 349\uffee\uffeeM 140 230\uffee\uffeeW 450\uffee\uffec" + text + "\uffec");
    g_task_sleep_signal(8, "TASK#SLEEP");
};
var clear = func ~() {
    if (first) {
        destroy();
        first := false;
    }
};

g_start_share(switch_name, g_false);
var signal = g_create_one_semaphore(signal_name);

while (g_query_share(ui_name)) {
    if (g_query_share(switch_name)) {
        draw();
    } else {
        clear();
        g_lock_semaphore(signal);
    }
}

g_stop_share(switch_name);
g_stop_share(ui_name);
g_destroy_semaphore(g_use_semaphore(signal_name));

g_printn("Exit.");