import "sys.base";
import "sys.list";
import "sys.string";
var g_join_process = func ~(pid) {
    if (pid == -1) {
        return false;
    }
    g_printdn("Waiting proc: #" + g_get_pid() + " -> #" + pid);
    while (g_join_process_once(pid)) {}
    g_printdn("Waiting proc: #" + g_get_pid() + " -> #" + pid + " ok");
    return true;
};
export "g_join_process";
var g_join_process_array = func ~(pid) {
    var len = g_array_size(pid) - 1;
    foreach (var i : g_range(0, len)) {
        g_printdn("Waiting proc: #" + g_get_pid() + " -> #" + g_array_get_ex(pid, i));
        g_join_process(g_array_get_ex(pid, i));
        g_printdn("Waiting proc: #" + g_get_pid() + " -> #" + g_array_get_ex(pid, i) + " ok");
    }
};
export "g_join_process_array";
var g_join_process_time = func ~(pid, time) {
    for (var i = 0; i < time; i++) {
        g_join_process_once(pid);
    }
};
export "g_join_process_time";
var g_live_process_array = func ~(pid) {
    var len = g_array_size(pid) - 1;
    foreach (var i : g_range(0, len)) {
        if (g_live_process(g_array_get_ex(pid, i))) {
            return true;
        }
    }
    return false;
};
export "g_live_process_array";
var g_lock_share = func ~(name) {
    while (g_try_lock_share(name)) {}
};
export "g_lock_share";
var g_read_pipe = func ~(handle, callback) {
    g_printdn("Reading pipe: #" + g_get_pid() + " -> #" + handle);
    var data = '\0';
    for (;;) {
        data := g_read_pipe_char(handle);
        if (data == '\uffff') {
            break;
        }
        if (data != '\ufffe') {
            callback(data);
        }
    }
    g_printdn("Reading pipe: #" + g_get_pid() + " -> #" + handle + " ok");
};
export "g_read_pipe";
var g_read_pipe_once = func ~(handle) {
    g_printdn("Reading pipe once: #" + g_get_pid() + " -> #" + handle);
    var data = '\0';
    for (;;) {
        data := g_read_pipe_char(handle);
        if (data == '\uffff') {
            break;
        }
        if (data != '\ufffe') {
            break;
        }
    }
    g_printdn("Reading pipe once: #" + g_get_pid() + " -> #" + handle + " ok");
};
export "g_read_pipe_once";
var g_read_pipe_args = func ~(handle, callback, args) {
    g_printdn("Reading pipe: #" + g_get_pid() + " -> #" + handle);
    var data = '\0';
    for (;;) {
        data := g_read_pipe_char(handle);
        if (data == '\uffff') {
            break;
        }
        if (data != '\ufffe') {
            callback(data, args);
        }
    }
    g_printdn("Reading pipe: #" + g_get_pid() + " -> #" + handle + " ok");
};
export "g_read_pipe_args";
var g_read_pipe_args_timeout = func ~(handle, callback, args, time) {
    g_printdn("Reading pipe: #" + g_get_pid() + " -> #" + handle);
    var data = '\0';
    var begin = g_get_timestamp();
    var end = begin + time;
    while (begin < end) {
        data := g_read_pipe_char_no_block(handle);
        if (data == '\uffff') {
            break;
        }
        if (data != '\ufffe') {
            callback(data, args);
        }
        begin := g_get_timestamp();
    }
    g_printdn("Reading pipe: #" + g_get_pid() + " -> #" + handle + " ok");
};
export "g_read_pipe_args_timeout";
var g_write_pipe = func ~(handle, data) {
    foreach (var ch : g_range_string(data)) {
        g_write_pipe_char(handle, ch);
    }
};
export "g_write_pipe";
var g_write_pipe_n = func ~(handle, data) {
    g_write_pipe(handle, data + g_endl);
};
export "g_write_pipe_n";
var g_load_sync = func ~(fn) -> g_join_process(g_load(fn));
export "g_load_sync";
var g_load_sync_x = func ~(fn) -> g_join_process(g_load_x(fn));
export "g_load_sync_x";
var g_load_user_sync_x = func ~(fn) -> g_join_process(g_load_user_x(fn));
export "g_load_user_sync_x";
var g_wait_share = func ~(handle) {
    for (;;) {
        var share = g_query_share(handle);
        if (g_is_null(share)) { g_sleep(10); continue; }
        return share;
    }
};
export "g_wait_share";
var g_wait_pipe = func ~(handle) {
    g_printdn("Waiting pipe: #" + g_get_pid() + " -> #" + handle);
    for (;;) {
        var pipe = g_query_pipe(handle);
        if (pipe) { break; }
        g_sleep(10);
    }
    g_printdn("Waiting pipe: #" + g_get_pid() + " -> #" + handle + " ok");
    return g_create_pipe(handle);
};
export "g_wait_pipe";
var g_empty_pipe = func ~(handle) {
    var pipe = g_wait_pipe(handle);
    while (g_wait_pipe_empty(pipe)) {}
};
export "g_empty_pipe";
var g_destroy_pipe = func ~(handle) {
    g_printdn("Destroy pipe: #" + g_get_pid() + " -> #" + handle);
    while (g_wait_pipe_empty(handle)) {}
    g_destroy_pipe_once(handle);
    g_printdn("Destroy pipe: #" + g_get_pid() + " -> #" + handle +" ok");
};
export "g_destroy_pipe";
var g_create_semaphore = func ~(name, n) {
    if (g_query_pipe(name)) {
        return g_create_pipe(name);
    }
    var pipe = g_create_pipe(name);
    g_write_pipe(pipe, g_string_rep("*", n));
    return pipe;
};
export "g_create_semaphore";
var g_create_one_semaphore = func ~(name) {
    if (g_query_pipe(name)) {
        return g_create_pipe(name);
    }
    var pipe = g_create_pipe(name);
    g_write_pipe(pipe, '*');
    return pipe;
};
export "g_create_one_semaphore";
var g_use_semaphore = func ~(name) {
    return g_create_pipe(name);
};
export "g_use_semaphore";
var g_destroy_semaphore = func ~(handle) {
    g_destroy_pipe_once(handle);
};
export "g_destroy_semaphore";
var g_lock_semaphore = func ~(handle) {
    g_read_pipe_once(handle);
};
export "g_lock_semaphore";
var g_unlock_semaphore = func ~(handle) {
    g_write_pipe(handle, "*");
};
export "g_unlock_semaphore";
var g_create_mutex = func ~(name) {
    if (g_query_pipe(name)) {
        return;
    }
    var pipe = g_create_pipe(name);
    g_write_pipe(pipe, "*");
    return pipe;
};
export "g_create_mutex";
var g_use_mutex = func ~(name) {
    return g_create_pipe(name);
};
export "g_use_mutex";
var g_destroy_mutex = func ~(handle) {
    g_destroy_pipe_once(handle);
};
export "g_destroy_mutex";
var g_lock_mutex = func ~(handle) {
    g_read_pipe_once(handle);
};
export "g_lock_mutex";
var g_unlock_mutex = func ~(handle) {
    g_write_pipe(handle, "*");
};
export "g_unlock_mutex";

// USER PROC API
