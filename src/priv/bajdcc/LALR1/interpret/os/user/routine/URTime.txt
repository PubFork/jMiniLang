import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.string";

call g_set_process_desc("time routinue");
var pid = call g_get_pid();
var share = call g_wait_share("PID#" + pid);
call g_stop_share("PID#" + pid);
var args = call g_map_get(share, "args");

var arg1 = call g_array_get(args, 0);

var in = call g_create_pipe("PIPEIN#" + pid);
var out = call g_create_pipe("PIPEOUT#" + pid);

var signal = "PIDSIG#" + pid;
call g_start_share(signal, true);

if (call g_is_null(arg1)) { // 无参：当前时间
    var get_time = func ~() -> call g_task_get_fast("system", "now");
    for (; call g_query_share(signal);) {
        call g_write_pipe(out, "" + call get_time() + "\r");
        call g_task_sleep(1);
    }
    call g_write_pipe(out, g_endl);
} else { // 有参：程序运行计时
    var begin_time = call g_task_get_fast_arg("system", "now", "timestamp");
    call g_read_pipe_args(in, lambda(ch, out) { call g_write_pipe(out, ch); call g_sleep(time); }, out);
    var end_time = call g_task_get_fast_arg("system", "now", "timestamp");
    var period = end_time - begin_time;
    call g_printn("Running time: " + period + "ms");
    call g_write_pipe(out, g_endl + " ** Running time: " + period + "ms" + g_endl);

    /*
      # 比如，输入命令“range 1 1000 | grep 1 | count | time a”，一般打印出2500ms左右的结果。
    */
}

call g_stop_share(signal);

call g_destroy_pipe(out);
call g_destroy_pipe(in);
