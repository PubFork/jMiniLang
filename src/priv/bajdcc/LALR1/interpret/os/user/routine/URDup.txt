import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.string";

g_set_process_desc("dup routine");
var pid = g_get_pid();
var share = g_wait_share("PID#" + pid);
g_stop_share("PID#" + pid);
var args = share["args"];
var count = args[0];
if (g_is_null(count)) {
    count := "2";
}
count := g_string_atoi(count);

var buf = [];
var pipe = func ["PIPE"] ~(ch, out) {
    if (ch == '\n'/* || ch == '\r'*/) {
        foreach (var i : g_range(1, count)) {
            foreach (var j : g_range_array(buf)) {
                g_write_pipe(out, j);
            }
            g_write_pipe(out, g_endl);
        }
        g_array_clear(buf);
    } else {
        g_array_add(buf, ch);
    }
};

var in = g_create_pipe("PIPEIN#" + pid);
var out = g_create_pipe("PIPEOUT#" + pid);
g_read_pipe_args(in, pipe, out);
g_destroy_pipe(out);