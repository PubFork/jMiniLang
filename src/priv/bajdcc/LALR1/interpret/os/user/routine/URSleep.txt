import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.string";

call g_set_process_desc("sleep routinue");
var pid = call g_get_pid();
var share = call g_wait_share("PID#" + pid);
call g_stop_share("PID#" + pid);
var args = call g_map_get(share, "args");

var in = call g_create_pipe("PIPEIN#" + pid);
var out = call g_create_pipe("PIPEOUT#" + pid);

var signal = "PIDSIG#" + pid;
call g_start_share(signal, true);

var second = call g_array_get(args, 0);
if (call g_is_null(second)) {
    let second = "0";
}
let second = call g_string_atoi(second);

//var get_tick = func ~() -> call g_task_get_fast_arg("system", "now", "timestamp");
var begin = call g_task_get_timestamp();
var end = begin + second * 1000;
while (begin < end && call g_query_share(signal)) {
    let begin = call g_task_get_timestamp();
    call g_sleep(50);
}

call g_stop_share(signal);
call g_read_pipe_args(in, lambda(ch, out) { call g_write_pipe(out, ch); call g_sleep(time); }, out);
call g_destroy_pipe(out);