import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.string";
import "sys.func";
import "module.lisp";

g_set_process_desc("util service");
g_set_process_priority(73);

g_printn("Running...");

var tid = 2;
var handle = g_create_pipe("TASKSEND#" + tid);

g_func_import_string_module();
var env = g_lisp_env();

var time = func ~(msg, caller) {
    var id = g_map_get(msg, "id");
    if (g_is_null(id)) {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid task argument - id");
        return;
    }
    var arg = g_map_get(msg, "arg");
    var arr = g_func_drop(arg, 2);
    if (g_array_empty(arr)) { return; }
    if (id == "calc") {
        var str = g_string_join_array(arr, "");
        var val = g_task_calc(str);
        g_map_put(msg, "val", val);
    } else if (id == "sum") {
        arr := g_func_fold("g_array_add", arr, g_new_array, "g_func_xsl", "g_string_atoi_s", "g_func_1", "g_not_null");
        var val = g_func_apply("g_func_add", arr);
        g_map_put(msg, "val", val);
    } else if (id == "product") {
        arr := g_func_fold("g_array_add", arr, g_new_array, "g_func_xsl", "g_string_atoi_s", "g_func_1", "g_not_null");
        var val = g_func_apply("g_func_mul", arr);
        g_map_put(msg, "val", val);
    } else if (id == "reverse") {
        var str = g_string_join_array(arr, " ");
        var val = g_string_reverse(str);
        g_map_put(msg, "val", val);
    } else if (id == "palindrome") {
        var str = g_string_join_array(arr, " ");
        var val = g_func_applicative("g_func_eq", str, "g_string_reverse");
        g_map_put(msg, "val", val);
    } else if (id == "toupper") {
        arr := g_func_map(arr, "g_string_toupper");
        var val = g_string_join_array(arr, " ");
        g_map_put(msg, "val", val);
    } else if (id == "tolower") {
        arr := g_func_map(arr, "g_string_tolower");
        var val = g_string_join_array(arr, " ");
        g_map_put(msg, "val", val);
    } else if (id == "doc") {
        var val = g_string_join_array(arr, " ");
        val := g_doc(val);
        g_map_put(msg, "val", val);
    } else if (id == "lisp") {
         var str = g_string_join_array(arr, " ");
         var val = g_lisp_repl(env, str);
         g_map_put(msg, "val", val);
    }
};

var handler = func ~(ch) {
    if (ch == 'E') {
        g_destroy_pipe(handle);
        return;
    }
    var msg = g_query_share("TASKDATA#" + tid);
    var caller = g_query_share("TASKCALLER#" + tid);
    time(msg, caller);
    var handle = g_create_pipe("TASKRECV#" + tid);
    g_write_pipe(handle, 'E');
};

var data = {};
g_task_add_proc(2, data);

g_read_pipe(handle, handler);

g_printn("Exit.");