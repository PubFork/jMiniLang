import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.remote";

g_set_process_desc("ui service");
g_set_process_priority(74);

g_printn("Running...");

var tid = 3;
var handle = g_create_pipe("TASKSEND#" + tid);

var time = func ~(msg, caller) {
    var id = msg["id"];
    if (g_is_null(id)) {
        g_map_put(msg, "error", 1);
        g_map_put(msg, "val", "invalid task argument - id");
        return;
    }
    if (id == "print") {
        var arg = msg["arg"];
        var str = "";
        var len = g_array_size(arg);
        foreach (var i : g_range(2, len - 1)) {
            str += arg[i];
        }
        g_remote_print(str);
        g_map_put(msg, "val", str);
    } else if (id == "path") {
        var arg = msg["arg"];
        var len = g_array_size(arg);
        var str = "";
        foreach (var i : g_range(2, len - 1)) {
            str += arg[i] + " ";
        }
        g_remote_print(str + "`");
        g_map_put(msg, "val", str);
    } else if (id == "on") {
        var arg = msg["arg"];
        var len = g_array_size(arg);
        var target = "";
        if (len == 3) {
            target := arg[2];
            var name_list = g_query_share("UI#NAMELIST");
            var index = g_array_find(name_list, target);
            if (g_is_null(index)) {
                g_map_put(msg, "error", 1);
                g_map_put(msg, "val", "invalid target");
            } else {
                var name = "UI_SWITCH#" + target;
                if (g_query_share(name)) {
                    g_map_put(msg, "error", 1);
                    g_map_put(msg, "val", target + " already ON");
                } else {
                    g_create_share(name, g_true);
                    g_unlock_semaphore(g_use_semaphore("UI_SIGNAL#" + target));
                    g_map_put(msg, "val", target + " ON");
                }
            }
        } else {
            g_map_put(msg, "error", 1);
            g_map_put(msg, "val", "invalid argument");
        }
    } else if (id == "off") {
        var arg = msg["arg"];
        var len = g_array_size(arg);
        var target = "";
        if (len == 3) {
            target := arg[2];
            var name_list = g_query_share("UI#NAMELIST");
            var index = g_array_find(name_list, target);
            if (g_is_null(index)) {
                g_map_put(msg, "error", 1);
                g_map_put(msg, "val", "invalid target");
            } else {
                var name = "UI_SWITCH#" + target;
                if (!g_query_share(name)) {
                    g_map_put(msg, "error", 1);
                    g_map_put(msg, "val", target + " already OFF");
                } else {
                    g_create_share(name, g_false);
                    g_map_put(msg, "val", target + " OFF");
                }
            }
        } else {
            g_map_put(msg, "error", 1);
            g_map_put(msg, "val", "invalid argument");
        }
    }
};

var handler_count = 0;
var handler = func ~(ch) {
    if (ch == 'E') {
        while (handler_count > 0) {
            g_sleep(100);
        }
        var ui_num = 8; // ! UI_NUM
        var ui_name_table = g_query_share("UI#NAMELIST");

        g_stop_share("TASK#SLEEP");
        foreach (var i : g_range(0, ui_num - 1)) {
            var ui_name = ui_name_table[i];
            if (!g_is_null(ui_name)) {
                g_create_share("UI#" + ui_name, false);
                g_unlock_semaphore(g_use_semaphore("UI_SIGNAL#" + ui_name));
            }
        }
        g_join_process_array(g_query_share("UI#PIDS"));
        g_stop_share("UI#PIDS");
        g_destroy_pipe(handle);
        return;
    }
    handler_count++;
    var msg = g_query_share("TASKDATA#" + tid);
    var caller = g_query_share("TASKCALLER#" + tid);
    time(msg, caller);
    var handle = g_create_pipe("TASKRECV#" + tid);
    g_write_pipe(handle, 'E');
    handler_count--;
};

var data = {};
g_task_add_proc(3, data);
g_start_share("REMOTE#MUTEX", "remote mutex");
g_load_x("/ui/main");

g_read_pipe(handle, handler);

g_printn("Exit.");