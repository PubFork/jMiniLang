import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.remote";

call g_set_process_desc("ui service");
call g_set_process_priority(74);

call g_printn("Running...");

var tid = 3;
var handle = call g_create_pipe("TASKSEND#" + tid);

var time = func ~(msg, caller) {
    var id = call g_map_get(msg, "id");
    if (call g_is_null(id)) {
        call g_map_put(msg, "error", 1);
        call g_map_put(msg, "val", "invalid task argument - id");
        return;
    }
    if (id == "print") {
        var arg = call g_map_get(msg, "arg");
        var str = "";
        var len = call g_array_size(arg);
        foreach (var i : call g_range(2, len - 1)) {
            let str = str + call g_array_get(arg, i);
        }
        call g_remote_print(str);
        call g_map_put(msg, "val", str);
    } else if (id == "path") {
        var arg = call g_map_get(msg, "arg");
        var len = call g_array_size(arg);
        var str = "";
        foreach (var i : call g_range(2, len - 1)) {
            let str = str + call g_array_get(arg, i) + " ";
        }
        call g_remote_print(str + "`");
        call g_map_put(msg, "val", str);
    } else if (id == "on") {
        var arg = call g_map_get(msg, "arg");
        var len = call g_array_size(arg);
        var target = "";
        if (len == 3) {
            let target = call g_array_get(arg, 2);
            var name_list = call g_query_share("UI#NAMELIST");
            var index = call g_array_find(name_list, target);
            if (call g_is_null(index)) {
                call g_map_put(msg, "error", 1);
                call g_map_put(msg, "val", "invalid target");
            } else {
                var name = "UI_SWITCH#" + target;
                if (call g_query_share(name)) {
                    call g_map_put(msg, "error", 1);
                    call g_map_put(msg, "val", target + " already ON");
                } else {
                    call g_create_share(name, g_true);
                    call g_map_put(msg, "val", target + " ON");
                }
            }
        } else {
            call g_map_put(msg, "error", 1);
            call g_map_put(msg, "val", "invalid argument");
        }
    } else if (id == "off") {
        var arg = call g_map_get(msg, "arg");
        var len = call g_array_size(arg);
        var target = "";
        if (len == 3) {
            let target = call g_array_get(arg, 2);
            var name_list = call g_query_share("UI#NAMELIST");
            var index = call g_array_find(name_list, target);
            if (call g_is_null(index)) {
                call g_map_put(msg, "error", 1);
                call g_map_put(msg, "val", "invalid target");
            } else {
                var name = "UI_SWITCH#" + target;
                if (!call g_query_share(name)) {
                    call g_map_put(msg, "error", 1);
                    call g_map_put(msg, "val", target + " already OFF");
                } else {
                    call g_create_share(name, g_false);
                    call g_map_put(msg, "val", target + " OFF");
                }
            }
        } else {
            call g_map_put(msg, "error", 1);
            call g_map_put(msg, "val", "invalid argument");
        }
    }
};

var handler_count = 0;
var handler = func ~(ch) {
    if (ch == 'E') {
        while (handler_count > 0) {
            call g_sleep(100);
        }
        var ui_num = 8; // ! UI_NUM
        var ui_name_table = call g_query_share("UI#NAMELIST");

        call g_stop_share("TASK#SLEEP");
        foreach (var i : call g_range(0, ui_num - 1)) {
            var ui_name = call g_array_get(ui_name_table, i);
            if (!call g_is_null(ui_name)) {
                call g_create_share("UI#" + ui_name, false);
            }
        }
        call g_join_process_array(call g_query_share("UI#PIDS"));
        call g_stop_share("UI#PIDS");
        call g_destroy_pipe(handle);
        return;
    }
    handler_count++;
    var msg = call g_query_share("TASKDATA#" + tid);
    var caller = call g_query_share("TASKCALLER#" + tid);
    call time(msg, caller);
    var handle = call g_create_pipe("TASKRECV#" + tid);
    call g_write_pipe(handle, 'E');
    handler_count--;
};

var data = {};
call g_task_add_proc(3, data);
call g_start_share("REMOTE#MUTEX", "remote mutex");
call g_load_x("/ui/main");

call g_read_pipe(handle, handler);

call g_printn("Exit.");