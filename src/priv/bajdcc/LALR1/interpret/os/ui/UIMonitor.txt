import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.math";
import "sys.string";
import "sys.remote";

call g_set_process_desc("monitor ui");
call g_set_process_priority(80);

var uid = 3;
var ui = call g_array_get(call g_query_share("UI#NAMELIST"), uid);
var ui_name = "UI#" + ui;
var switch_name = "UI_SWITCH#" + ui;
var signal_name = "UI_SIGNAL#" + ui;

call g_printn("Running...");

var first = false;
var init = func ~() {
    call g_task_get_fast_arg("ui", "path", "\uffeeM 0 0\uffee\uffeeR 800 600\uffee");
};
var destroy = func ~() {
    call g_task_get_fast_arg("ui", "path", "\uffeeM 0 0\uffee\uffeeR 800 600\uffee");
};

var draw = func ~() {
    if (!first) {
        call init();
        let first = true;
    }

    var procs = call g_query_all_proc();
    var text = call g_string_join_array(procs, g_endl);
    var speed = call g_task_get_fast("system", "speed");
    var speed_text = "";
    if (speed > 1.0e6) {
        let speed_text = "" + call g_floor(speed / 1.0e6, 2) + "M";
    } else if (speed > 1.0e3) {
        let speed_text = "" + call g_floor(speed / 1.0e3, 2) + "K";
    } else {
        let speed_text = "" + call g_floor(speed, 2);
    }
    let text = "    Speed: " + speed_text + "\n" + text;
    call g_task_get_fast_arg("ui", "path", "\uffeeM 0 0\uffee\uffeeR 800 600\uffee\uffeeW 800\uffee\uffeeM 0 20\uffee\uffec" + text + "\uffec");
    call g_task_sleep_signal(1, "TASK#SLEEP");
};
var clear = func ~() {
    if (first) {
        call destroy();
        let first = false;
    }
};

call g_start_share(switch_name, g_false);
var signal = call g_create_one_semaphore(signal_name);

while (call g_query_share(ui_name)) {
    if (call g_query_share(switch_name)) {
        call draw();
    } else {
        call clear();
        call g_lock_semaphore(signal);
    }
}

call g_stop_share(switch_name);
call g_stop_share(ui_name);
call g_destroy_semaphore(call g_use_semaphore(signal_name));

call g_printn("Exit.");