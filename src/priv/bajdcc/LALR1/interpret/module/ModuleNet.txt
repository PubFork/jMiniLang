// Net
import "sys.base";
import "sys.list";
import "sys.func";
import "sys.proc";
import "sys.task";
import "sys.string";

// --------------------------------------------------------
// SERVER
var shutdown_server = func ~(out, signal, port, log) {
    call g_net_msg_shutdown_server();
    call g_printn("Shutting down msg server, port: " + port);
    if (log) { call g_write_pipe(out, "Server stopped!\n"); }
    while (true) {
        var s = call g_net_msg_get_server_status();
        if (s == 3) {
            call g_write_pipe(out, call g_net_msg_get_error() + "\n");
        }
        if (s == 0) {
            break;
        }
    }
};

var msg_receive = func ~(out, signal, port, log) {
    if (log) { call g_write_pipe(out, "Server listening...\n"); }
    while (call g_query_share(signal)) {
        var s = call g_net_msg_get_server_msg();
        if (call g_is_null(s)) {
            call g_task_sleep_signal(1, signal);
            continue;
        }
        call g_printdn("Received msg: " + s);
        var obj = call g_net_parse_json(s);
        if (call g_is_null(obj)) {
            call g_task_sleep_signal(1, signal);
            continue;
        }
        var type = call g_map_get(obj, "type");
        var addr = call g_map_get(obj, "addr");
        var content = call g_map_get(obj, "content");
        var msg = "[" + type + "] " + addr + ": " + content;
        if (log) { call g_write_pipe(out, "[" + type + "] " + addr + ": " + content + "\n"); }
        else if (type == "MSG ") { call g_write_pipe(out, content + "\n"); }
        call g_printdn("Received msg: " + msg);
    }
};

var g_net_msg_create_server = func ~(in, out, signal, port, log) {
    var r = call g_net_msg_create_server_internal(port);
    if (r) {
        if (log) { call g_write_pipe(out, "Server initializing...\n"); }
        while (true) {
            var s = call g_net_msg_get_server_status();
            if (s == 3) {
                call g_write_pipe(out, call g_net_msg_get_error() + "\n");
            }
            if (s == 0) {
                return;
            }
            if (s == 2) {
                call g_printn("Running msg server, port: " + port);
                if (log) { call g_write_pipe(out, "Server created successfully!\n"); }
                break;
            }
        }
        call msg_receive(out, signal, port, log);
        call shutdown_server(out, signal, port, log);
    } else {
        call g_write_pipe(out, "Client/Server already created!\n");
    }
};
export "g_net_msg_create_server";

// --------------------------------------------------------
// CLIENT
var shutdown_client = func ~(out, signal, addr) {
    call g_net_msg_shutdown_client();
    call g_printn("Shutting down msg client, addr: " + addr);
    call g_write_pipe(out, "Client stopped!\n");
    while (true) {
        var s = call g_net_msg_get_client_status();
        if (s == 3) {
            call g_write_pipe(out, call g_net_msg_get_error() + "\n");
        }
        if (s == 0) {
            break;
        }
    }
};

var msg_send = func ~(in, out, signal, addr) {
    call g_write_pipe(out, "Client connecting...\n");
    var i = 0;
    while (call g_query_share(signal) && i < 2) {
        var s = call g_net_msg_get_client_msg();
        if (call g_is_null(s)) {
            call g_task_sleep_signal(1, signal);
            i++;
            continue;
        }
        call g_printdn("Received msg: " + s);
        var obj = call g_net_parse_json(s);
        if (call g_is_null(obj)) {
            call g_task_sleep_signal(1, signal);
            continue;
        }
        var type = call g_map_get(obj, "type");
        var addr = call g_map_get(obj, "addr");
        var content = call g_map_get(obj, "content");
        var msg = "[" + type + "] " + addr + ": " + content;
        call g_write_pipe(out, "[" + type + "] " + addr + ": " + content + "\n");
        call g_printdn("Received msg: " + msg);
    }
    var buf = [];
    var pipe = func ["PIPE"] ~(ch, out) {
        if (ch == '\n' || ch == '\r') {
            var str = call g_string_build(buf);
            call g_printn("Sending msg: " + str);
            call g_net_msg_client_send(str);
            call g_array_clear(buf);
        } else {
            call g_array_add(buf, ch);
        }
        call g_write_pipe(out, ch);
    };
    call g_read_pipe_args(in, pipe, out);
};

var g_net_msg_create_client = func ~(in, out, signal, addr) {
    var r = call g_net_msg_create_client_internal(addr);
    if (r) {
        call g_write_pipe(out, "Client initializing...\n");
        while (true) {
            var s = call g_net_msg_get_client_status();
            if (s == 3) {
                call g_write_pipe(out, call g_net_msg_get_error() + "\n");
            }
            if (s == 0) {
                return;
            }
            if (s == 2) {
                call g_printn("Running msg client, addr: " + addr);
                call g_write_pipe(out, "Client created successfully!\n");
                break;
            }
        }
        call msg_send(in, out, signal, addr);
        call shutdown_client(out, signal, addr);
    } else {
        call g_write_pipe(out, "Client/Server already created!\n");
    }
};
export "g_net_msg_create_client";
