import "sys.base";
import "sys.list";

var g_create_context = func ~() -> g_new_map;
export "g_create_context";

var g_create_property = func ~(class, name, property) {
    call g_map_put(class, name, property);
};
export "g_create_property";
var g_get_property = func ~(class, name) {
    if (call g_map_contains(class, name)) {
        return call g_map_get(class, name);
    }
    var base = call g_map_get(class, "__base__");
    if (call g_is_null(base)) {
        return;
    }
    return call g_get_property(base, name);
};
export "g_get_property";
var g_has_property = func ~(class, name) {
    if (call g_map_contains(class, name)) {
        return true;
    }
    var base = call g_map_get(class, "__base__");
    if (call g_is_null(base)) {
        return false;
    }
    return call g_has_property(base, name);
};
export "g_has_property";
var g_set_property_rec = func ~(class, name, property) {
    if (call g_map_contains(class, name)) {
        call g_map_put(class, name, property);
        return true;
    }
    var base = call g_map_get(class, "__base__");
    if (call g_is_null(base)) {
        return false;
    }
    if (!call g_set_property_rec(base, name, property)) {
        call g_map_put(class, name, property);
    }
    return true;
};
export "g_set_property_rec";
var g_set_property = func ~(class, name, property) {
    if (call g_map_contains(class, name)) {
        call g_map_put(class, name, property);
        return true;
    }
    var base = call g_map_get(class, "__base__");
    if (call g_is_null(base)) {
        call g_map_put(class, name, property);
        return false;
    }
    if (!call g_set_property_rec(base, name, property)) {
        call g_map_put(class, name, property);
    }
    return true;
};
export "g_set_property";

var g_create_method = func ~(class, name, method) {
    call g_map_put(class, name, method);
};
export "g_create_method";
var g_invoke_method = func ~(class, name) {
    var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next01 = func ~(__ret, __before, __cnt, __i, __next) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next);
            return call next(class."__type__", name, class, _next);
        };
        var ret = call _next01(_ret, _before, _cnt, _i, _next01);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next02 = func ~(__ret, __after, __cnt, __i, _r, __next) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next);
            return call next(class."__type__", name, class, _r, _next);
        };
        var ret = call _next02(_ret, _after, _cnt, _i, r, _next02);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method";
var g_invoke_method_1 = func ~(class, name, arg1) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next11 = func ~(__ret, __before, __cnt, __i, __next, arg1) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1);
            return call next(class."__type__", name, class, _next, arg1);
        };
        var ret = call _next11(_ret, _before, _cnt, _i, _next11, arg1);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next12 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1);
            return call next(class."__type__", name, class, _r, _next, arg1);
        };
        var ret = call _next12(_ret, _after, _cnt, _i, r, _next12, arg1);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_1";
var g_invoke_method_2 = func ~(class, name, arg1, arg2) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next21 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2);
            return call next(class."__type__", name, class, _next, arg1, arg2);
        };
        var ret = call _next21(_ret, _before, _cnt, _i, _next21, arg1, arg2);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next22 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2);
        };
        var ret = call _next22(_ret, _after, _cnt, _i, r, _next22, arg1, arg2);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_2";
var g_invoke_method_3 = func ~(class, name, arg1, arg2, arg3) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next31 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3);
            return call next(class."__type__", name, class, _next, arg1, arg2, arg3);
        };
        var ret = call _next31(_ret, _before, _cnt, _i, _next31, arg1, arg2, arg3);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2, arg3);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next32 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2, arg3);
        };
        var ret = call _next32(_ret, _after, _cnt, _i, r, _next32, arg1, arg2, arg3);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_3";
var g_invoke_method_4 = func ~(class, name, arg1, arg2, arg3, arg4) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next41 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4);
            return call next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4);
        };
        var ret = call _next41(_ret, _before, _cnt, _i, _next41, arg1, arg2, arg3, arg4);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2, arg3, arg4);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next42 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4);
        };
        var ret = call _next42(_ret, _after, _cnt, _i, r, _next42, arg1, arg2, arg3, arg4);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_4";
var g_invoke_method_5 = func ~(class, name, arg1, arg2, arg3, arg4, arg5) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next51 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5);
            return call next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5);
        };
        var ret = call _next51(_ret, _before, _cnt, _i, _next51, arg1, arg2, arg3, arg4, arg5);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2, arg3, arg4, arg5);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next52 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5);
        };
        var ret = call _next52(_ret, _after, _cnt, _i, r, _next52, arg1, arg2, arg3, arg4, arg5);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_5";
var g_invoke_method_6 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next61 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6);
            return call next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6);
        };
        var ret = call _next61(_ret, _before, _cnt, _i, _next61, arg1, arg2, arg3, arg4, arg5, arg6);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2, arg3, arg4, arg5, arg6);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next62 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6);
        };
        var ret = call _next62(_ret, _after, _cnt, _i, r, _next62, arg1, arg2, arg3, arg4, arg5, arg6);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_6";
var g_invoke_method_7 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next71 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            return call next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        };
        var ret = call _next71(_ret, _before, _cnt, _i, _next71, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next72 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        };
        var ret = call _next72(_ret, _after, _cnt, _i, r, _next72, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_7";
var g_invoke_method_8 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next81 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return call next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        };
        var ret = call _next81(_ret, _before, _cnt, _i, _next81, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next82 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        };
        var ret = call _next82(_ret, _after, _cnt, _i, r, _next82, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_8";
var g_invoke_method_9 = func ~(class, name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
var method = class.name;
    if (call g_is_null(method)) { return; }
    var flag = call g_get_flag(method);
    if ((flag & 1) > 0) {
        var _ret = [];
        var _before = class.(name + "__before");
        var _cnt = call g_array_size(_before);
        var _i = 0;
        var _next91 = func ~(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__before, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __before, __cnt, __i, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            return call next(class."__type__", name, class, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        };
        var ret = call _next91(_ret, _before, _cnt, _i, _next91, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    var r = call method(class, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    if ((flag & 2) > 0) {
        var _ret = [];
        var _after = class.(name + "__after");
        var _cnt = call g_array_size(_after);
        var _i = 0;
        var _next92 = func ~(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
            if (__i >= __cnt) {
                call g_array_add(__ret, true);
                return;
            }
            var next = call g_array_get(__after, __i);
            __i++;
            var _next =  func ~() -> call __next(__ret, __after, __cnt, __i, _r, __next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            return call next(class."__type__", name, class, _r, _next, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        };
        var ret = call _next92(_ret, _after, _cnt, _i, r, _next92, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        if (call g_array_empty(_ret)) {
            return ret;
        }
    }
    return r;
};
export "g_invoke_method_9";

var g_register_class = func ~(ctx, name, init, base) {
    var class = {};
    call g_create_property(class, "name", name);
    if (!call g_is_null(base) && call g_map_contains(ctx, base)) {
        call g_create_property(class, "base", base);
    }
    call g_create_method(class, "init", init);
    call g_map_put(ctx, name, class);
};
export "g_register_class";

var g_create_class = func ~(ctx, name) {
    var prototype = call g_map_get(ctx, name);
    if (call g_is_null(prototype)) {
        return;
    }
    var class = {};
    call g_create_property(class, "__type__", name);
    if (call g_map_contains(prototype, "base")) {
        call g_map_put(class, "__base__", call g_create_class(ctx, call g_map_get(prototype, "base")));
    }
    var init = call g_map_get(prototype, "init");
    if (!call g_is_null(init)) {
        call init(class);
    }
    return class;
};
export "g_create_class";

// ---- HOOK ----

var g_hook_add_before = func ~(class, name, f) {
    var old = class.name;
    if (call g_is_null(old)) {
        return false;
    }
    var flag = call g_get_flag(old);
    if ((flag & 1) > 0) {
        var _before = class.(name + "__before");
        call g_array_add(_before, f);
    } else {
        var _before = [];
        call g_array_add(_before, f);
        set class::(name + "__before") = _before;
        call g_set_flag(old, flag | 1);
    }
    return true;
};
export "g_hook_add_before";
var g_hook_remove_before = func ~(class, name, f) {
    var old = class.name;
    if (call g_is_null(old)) {
        return false;
    }
    var flag = call g_get_flag(old);
    if ((flag & 1) > 0) {
        var _before = class.(name + "__before");
        var ret = call g_array_delete(_before, f);
        if (call g_array_empty(_before)) {
            set class::(name + "__before") = g_null;
            call g_set_flag(old, flag - 1);
        }
        return ret;
    }
    return false;
};
export "g_hook_remove_before";
var g_hook_add_after = func ~(class, name, f) {
    var old = class.name;
    if (call g_is_null(old)) {
        return false;
    }
    var flag = call g_get_flag(old);
    if ((flag & 2) > 0) {
        var _after = class.(name + "__after");
        call g_array_add(_after, f);
    } else {
        var _after = [];
        call g_array_add(_after, f);
        set class::(name + "__after") = _after;
        call g_set_flag(old, flag | 2);
    }
    return true;
};
export "g_hook_add_after";
var g_hook_remove_after = func ~(class, name, f) {
    var old = class.name;
    if (call g_is_null(old)) {
        return false;
    }
    var flag = call g_get_flag(old);
    if ((flag & 2) > 0) {
        var _after = class.(name + "__after");
        var ret = call g_array_delete(_after, f);
        if (call g_array_empty(_after)) {
            set class::(name + "__after") = g_null;
            call g_set_flag(old, flag - 2);
        }
        return ret;
    }
    return false;
};
export "g_hook_remove_after";